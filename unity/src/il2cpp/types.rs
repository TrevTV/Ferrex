/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppProfiler {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppCustomAttrInfo {
    _unused: [u8; 0],
}
pub const Il2CppProfileFlags_IL2CPP_PROFILE_NONE: Il2CppProfileFlags = 0;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_APPDOMAIN_EVENTS: Il2CppProfileFlags = 1;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_ASSEMBLY_EVENTS: Il2CppProfileFlags = 2;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_MODULE_EVENTS: Il2CppProfileFlags = 4;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_CLASS_EVENTS: Il2CppProfileFlags = 8;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_JIT_COMPILATION: Il2CppProfileFlags = 16;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_INLINING: Il2CppProfileFlags = 32;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_EXCEPTIONS: Il2CppProfileFlags = 64;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_ALLOCATIONS: Il2CppProfileFlags = 128;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_GC: Il2CppProfileFlags = 256;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_THREADS: Il2CppProfileFlags = 512;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_REMOTING: Il2CppProfileFlags = 1024;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_TRANSITIONS: Il2CppProfileFlags = 2048;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_ENTER_LEAVE: Il2CppProfileFlags = 4096;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_COVERAGE: Il2CppProfileFlags = 8192;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_INS_COVERAGE: Il2CppProfileFlags = 16384;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_STATISTICAL: Il2CppProfileFlags = 32768;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_METHOD_EVENTS: Il2CppProfileFlags = 65536;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_MONITOR_EVENTS: Il2CppProfileFlags = 131072;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_IOMAP_EVENTS: Il2CppProfileFlags = 262144;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_GC_MOVES: Il2CppProfileFlags = 524288;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_FILEIO: Il2CppProfileFlags = 1048576;
pub type Il2CppProfileFlags = ::std::os::raw::c_int;
pub const Il2CppProfileFileIOKind_IL2CPP_PROFILE_FILEIO_WRITE: Il2CppProfileFileIOKind = 0;
pub const Il2CppProfileFileIOKind_IL2CPP_PROFILE_FILEIO_READ: Il2CppProfileFileIOKind = 1;
pub type Il2CppProfileFileIOKind = ::std::os::raw::c_int;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_START: Il2CppGCEvent = 0;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_MARK_START: Il2CppGCEvent = 1;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_MARK_END: Il2CppGCEvent = 2;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_RECLAIM_START: Il2CppGCEvent = 3;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_RECLAIM_END: Il2CppGCEvent = 4;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_END: Il2CppGCEvent = 5;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_PRE_STOP_WORLD: Il2CppGCEvent = 6;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_POST_STOP_WORLD: Il2CppGCEvent = 7;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_PRE_START_WORLD: Il2CppGCEvent = 8;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_POST_START_WORLD: Il2CppGCEvent = 9;
pub type Il2CppGCEvent = ::std::os::raw::c_int;
pub const Il2CppGCMode_IL2CPP_GC_MODE_DISABLED: Il2CppGCMode = 0;
pub const Il2CppGCMode_IL2CPP_GC_MODE_ENABLED: Il2CppGCMode = 1;
pub const Il2CppGCMode_IL2CPP_GC_MODE_MANUAL: Il2CppGCMode = 2;
pub type Il2CppGCMode = ::std::os::raw::c_int;
pub const Il2CppStat_IL2CPP_STAT_NEW_OBJECT_COUNT: Il2CppStat = 0;
pub const Il2CppStat_IL2CPP_STAT_INITIALIZED_CLASS_COUNT: Il2CppStat = 1;
pub const Il2CppStat_IL2CPP_STAT_METHOD_COUNT: Il2CppStat = 2;
pub const Il2CppStat_IL2CPP_STAT_CLASS_STATIC_DATA_SIZE: Il2CppStat = 3;
pub const Il2CppStat_IL2CPP_STAT_GENERIC_INSTANCE_COUNT: Il2CppStat = 4;
pub const Il2CppStat_IL2CPP_STAT_GENERIC_CLASS_COUNT: Il2CppStat = 5;
pub const Il2CppStat_IL2CPP_STAT_INFLATED_METHOD_COUNT: Il2CppStat = 6;
pub const Il2CppStat_IL2CPP_STAT_INFLATED_TYPE_COUNT: Il2CppStat = 7;
pub type Il2CppStat = ::std::os::raw::c_int;
pub const Il2CppRuntimeUnhandledExceptionPolicy_IL2CPP_UNHANDLED_POLICY_LEGACY:
    Il2CppRuntimeUnhandledExceptionPolicy = 0;
pub const Il2CppRuntimeUnhandledExceptionPolicy_IL2CPP_UNHANDLED_POLICY_CURRENT:
    Il2CppRuntimeUnhandledExceptionPolicy = 1;
pub type Il2CppRuntimeUnhandledExceptionPolicy = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppStackFrameInfo {
    pub method: *const MethodInfo,
    pub raw_ip: usize,
}
#[test]
fn bindgen_test_layout_Il2CppStackFrameInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppStackFrameInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppStackFrameInfo>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppStackFrameInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStackFrameInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppStackFrameInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrameInfo),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_ip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrameInfo),
            "::",
            stringify!(raw_ip)
        )
    );
}
pub type Il2CppMethodPointer = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodDebugInfo {
    pub methodPointer: Il2CppMethodPointer,
    pub code_size: i32,
    pub file: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Il2CppMethodDebugInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMethodDebugInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodDebugInfo>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppMethodDebugInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodDebugInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMethodDebugInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodPointer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDebugInfo),
            "::",
            stringify!(methodPointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDebugInfo),
            "::",
            stringify!(code_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDebugInfo),
            "::",
            stringify!(file)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMemoryCallbacks {
    pub malloc_func:
        ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>,
    pub aligned_malloc_func: ::std::option::Option<
        unsafe extern "C" fn(size: usize, alignment: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub free_func: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
    pub aligned_free_func:
        ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
    pub calloc_func: ::std::option::Option<
        unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub realloc_func: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub aligned_realloc_func: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            alignment: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_Il2CppMemoryCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMemoryCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMemoryCallbacks>(),
        56usize,
        concat!("Size of: ", stringify!(Il2CppMemoryCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMemoryCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMemoryCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).malloc_func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(malloc_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aligned_malloc_func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(aligned_malloc_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(free_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aligned_free_func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(aligned_free_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calloc_func) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(calloc_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realloc_func) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(realloc_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aligned_realloc_func) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(aligned_realloc_func)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDebuggerTransport {
    pub name: *const ::std::os::raw::c_char,
    pub connect:
        ::std::option::Option<unsafe extern "C" fn(address: *const ::std::os::raw::c_char)>,
    pub wait_for_attach: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub close1: ::std::option::Option<unsafe extern "C" fn()>,
    pub close2: ::std::option::Option<unsafe extern "C" fn()>,
    pub send: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub recv: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_Il2CppDebuggerTransport() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDebuggerTransport> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDebuggerTransport>(),
        56usize,
        concat!("Size of: ", stringify!(Il2CppDebuggerTransport))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDebuggerTransport>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDebuggerTransport))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerTransport),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerTransport),
            "::",
            stringify!(connect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_for_attach) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerTransport),
            "::",
            stringify!(wait_for_attach)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerTransport),
            "::",
            stringify!(close1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerTransport),
            "::",
            stringify!(close2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerTransport),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerTransport),
            "::",
            stringify!(recv)
        )
    );
}
pub type Il2CppChar = u16;
pub type Il2CppNativeChar = ::std::os::raw::c_char;
pub type il2cpp_register_object_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arr: *mut *mut Il2CppObject,
        size: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type il2cpp_WorldChangedCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type Il2CppFrameWalkFunc = ::std::option::Option<
    unsafe extern "C" fn(info: *const Il2CppStackFrameInfo, user_data: *mut ::std::os::raw::c_void),
>;
pub type Il2CppProfileFunc = ::std::option::Option<unsafe extern "C" fn(prof: *mut Il2CppProfiler)>;
pub type Il2CppProfileMethodFunc = ::std::option::Option<
    unsafe extern "C" fn(prof: *mut Il2CppProfiler, method: *const MethodInfo),
>;
pub type Il2CppProfileAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(
        prof: *mut Il2CppProfiler,
        obj: *mut Il2CppObject,
        klass: *mut Il2CppClass,
    ),
>;
pub type Il2CppProfileGCFunc = ::std::option::Option<
    unsafe extern "C" fn(
        prof: *mut Il2CppProfiler,
        event: Il2CppGCEvent,
        generation: ::std::os::raw::c_int,
    ),
>;
pub type Il2CppProfileGCResizeFunc =
    ::std::option::Option<unsafe extern "C" fn(prof: *mut Il2CppProfiler, new_size: i64)>;
pub type Il2CppProfileFileIOFunc = ::std::option::Option<
    unsafe extern "C" fn(
        prof: *mut Il2CppProfiler,
        kind: Il2CppProfileFileIOKind,
        count: ::std::os::raw::c_int,
    ),
>;
pub type Il2CppProfileThreadFunc = ::std::option::Option<
    unsafe extern "C" fn(prof: *mut Il2CppProfiler, tid: ::std::os::raw::c_ulong),
>;
pub type Il2CppSetFindPlugInCallback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const Il2CppNativeChar) -> *const Il2CppNativeChar,
>;
pub type Il2CppLogCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>;
pub type Il2CppBacktraceFunc = ::std::option::Option<
    unsafe extern "C" fn(buffer: *mut Il2CppMethodPointer, maxSize: usize) -> usize,
>;
pub type il2cpp_array_size_t = usize;
pub type SynchronizationContextCallback = ::std::option::Option<unsafe extern "C" fn(arg: isize)>;
pub type Il2CppMethodSlot = u16;
pub const kInvalidIl2CppMethodSlot: u16 = 65535;
pub const ipv6AddressSize: ::std::os::raw::c_int = 16;
pub type il2cpp_hresult_t = i32;
pub const Il2CppTokenType_IL2CPP_TOKEN_MODULE: Il2CppTokenType = 0;
pub const Il2CppTokenType_IL2CPP_TOKEN_TYPE_REF: Il2CppTokenType = 16777216;
pub const Il2CppTokenType_IL2CPP_TOKEN_TYPE_DEF: Il2CppTokenType = 33554432;
pub const Il2CppTokenType_IL2CPP_TOKEN_FIELD_DEF: Il2CppTokenType = 67108864;
pub const Il2CppTokenType_IL2CPP_TOKEN_METHOD_DEF: Il2CppTokenType = 100663296;
pub const Il2CppTokenType_IL2CPP_TOKEN_PARAM_DEF: Il2CppTokenType = 134217728;
pub const Il2CppTokenType_IL2CPP_TOKEN_INTERFACE_IMPL: Il2CppTokenType = 150994944;
pub const Il2CppTokenType_IL2CPP_TOKEN_MEMBER_REF: Il2CppTokenType = 167772160;
pub const Il2CppTokenType_IL2CPP_TOKEN_CUSTOM_ATTRIBUTE: Il2CppTokenType = 201326592;
pub const Il2CppTokenType_IL2CPP_TOKEN_PERMISSION: Il2CppTokenType = 234881024;
pub const Il2CppTokenType_IL2CPP_TOKEN_SIGNATURE: Il2CppTokenType = 285212672;
pub const Il2CppTokenType_IL2CPP_TOKEN_EVENT: Il2CppTokenType = 335544320;
pub const Il2CppTokenType_IL2CPP_TOKEN_PROPERTY: Il2CppTokenType = 385875968;
pub const Il2CppTokenType_IL2CPP_TOKEN_MODULE_REF: Il2CppTokenType = 436207616;
pub const Il2CppTokenType_IL2CPP_TOKEN_TYPE_SPEC: Il2CppTokenType = 452984832;
pub const Il2CppTokenType_IL2CPP_TOKEN_ASSEMBLY: Il2CppTokenType = 536870912;
pub const Il2CppTokenType_IL2CPP_TOKEN_ASSEMBLY_REF: Il2CppTokenType = 587202560;
pub const Il2CppTokenType_IL2CPP_TOKEN_FILE: Il2CppTokenType = 637534208;
pub const Il2CppTokenType_IL2CPP_TOKEN_EXPORTED_TYPE: Il2CppTokenType = 654311424;
pub const Il2CppTokenType_IL2CPP_TOKEN_MANIFEST_RESOURCE: Il2CppTokenType = 671088640;
pub const Il2CppTokenType_IL2CPP_TOKEN_GENERIC_PARAM: Il2CppTokenType = 704643072;
pub const Il2CppTokenType_IL2CPP_TOKEN_METHOD_SPEC: Il2CppTokenType = 721420288;
pub type Il2CppTokenType = ::std::os::raw::c_int;
pub type TypeIndex = i32;
pub type TypeDefinitionIndex = i32;
pub type FieldIndex = i32;
pub type DefaultValueIndex = i32;
pub type DefaultValueDataIndex = i32;
pub type CustomAttributeIndex = i32;
pub type ParameterIndex = i32;
pub type MethodIndex = i32;
pub type GenericMethodIndex = i32;
pub type PropertyIndex = i32;
pub type EventIndex = i32;
pub type GenericContainerIndex = i32;
pub type GenericParameterIndex = i32;
pub type GenericParameterConstraintIndex = i16;
pub type NestedTypeIndex = i32;
pub type InterfacesIndex = i32;
pub type VTableIndex = i32;
pub type RGCTXIndex = i32;
pub type StringIndex = i32;
pub type StringLiteralIndex = i32;
pub type GenericInstIndex = i32;
pub type ImageIndex = i32;
pub type AssemblyIndex = i32;
pub type InteropDataIndex = i32;
pub type TypeFieldIndex = i32;
pub type TypeMethodIndex = i32;
pub type MethodParameterIndex = i32;
pub type TypePropertyIndex = i32;
pub type TypeEventIndex = i32;
pub type TypeInterfaceIndex = i32;
pub type TypeNestedTypeIndex = i32;
pub type TypeInterfaceOffsetIndex = i32;
pub type GenericContainerParameterIndex = i32;
pub type AssemblyTypeIndex = i32;
pub type AssemblyExportedTypeIndex = i32;
pub const kTypeIndexInvalid: TypeIndex = -1;
pub const kTypeDefinitionIndexInvalid: TypeDefinitionIndex = -1;
pub const kDefaultValueIndexNull: DefaultValueDataIndex = -1;
pub const kCustomAttributeIndexInvalid: CustomAttributeIndex = -1;
pub const kEventIndexInvalid: EventIndex = -1;
pub const kFieldIndexInvalid: FieldIndex = -1;
pub const kMethodIndexInvalid: MethodIndex = -1;
pub const kPropertyIndexInvalid: PropertyIndex = -1;
pub const kGenericContainerIndexInvalid: GenericContainerIndex = -1;
pub const kGenericParameterIndexInvalid: GenericParameterIndex = -1;
pub const kRGCTXIndexInvalid: RGCTXIndex = -1;
pub const kStringLiteralIndexInvalid: StringLiteralIndex = -1;
pub const kInteropDataIndexInvalid: InteropDataIndex = -1;
pub const kPublicKeyByteLength: ::std::os::raw::c_int = 8;

#[derive(Debug)]
#[repr(C)]
pub struct Il2CppMethod {}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodSpec {
    pub methodDefinitionIndex: MethodIndex,
    pub classIndexIndex: GenericInstIndex,
    pub methodIndexIndex: GenericInstIndex,
}
#[test]
fn bindgen_test_layout_Il2CppMethodSpec() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMethodSpec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodSpec>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppMethodSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodSpec>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMethodSpec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodDefinitionIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodSpec),
            "::",
            stringify!(methodDefinitionIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classIndexIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodSpec),
            "::",
            stringify!(classIndexIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodIndexIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodSpec),
            "::",
            stringify!(methodIndexIndex)
        )
    );
}
pub const Il2CppRGCTXDataType_IL2CPP_RGCTX_DATA_INVALID: Il2CppRGCTXDataType = 0;
pub const Il2CppRGCTXDataType_IL2CPP_RGCTX_DATA_TYPE: Il2CppRGCTXDataType = 1;
pub const Il2CppRGCTXDataType_IL2CPP_RGCTX_DATA_CLASS: Il2CppRGCTXDataType = 2;
pub const Il2CppRGCTXDataType_IL2CPP_RGCTX_DATA_METHOD: Il2CppRGCTXDataType = 3;
pub const Il2CppRGCTXDataType_IL2CPP_RGCTX_DATA_ARRAY: Il2CppRGCTXDataType = 4;
pub type Il2CppRGCTXDataType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppRGCTXDefinitionData {
    pub rgctxDataDummy: i32,
    pub __methodIndex: MethodIndex,
    pub __typeIndex: TypeIndex,
}
#[test]
fn bindgen_test_layout_Il2CppRGCTXDefinitionData() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppRGCTXDefinitionData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppRGCTXDefinitionData>(),
        4usize,
        concat!("Size of: ", stringify!(Il2CppRGCTXDefinitionData))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRGCTXDefinitionData>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppRGCTXDefinitionData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgctxDataDummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXDefinitionData),
            "::",
            stringify!(rgctxDataDummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__methodIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXDefinitionData),
            "::",
            stringify!(__methodIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__typeIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXDefinitionData),
            "::",
            stringify!(__typeIndex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppRGCTXDefinition {
    pub type_: Il2CppRGCTXDataType,
    pub data: Il2CppRGCTXDefinitionData,
}
#[test]
fn bindgen_test_layout_Il2CppRGCTXDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppRGCTXDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppRGCTXDefinition>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppRGCTXDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRGCTXDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppRGCTXDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXDefinition),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXDefinition),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericMethodIndices {
    pub methodIndex: MethodIndex,
    pub invokerIndex: MethodIndex,
    pub adjustorThunkIndex: MethodIndex,
}
#[test]
fn bindgen_test_layout_Il2CppGenericMethodIndices() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGenericMethodIndices> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericMethodIndices>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppGenericMethodIndices))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericMethodIndices>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppGenericMethodIndices))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethodIndices),
            "::",
            stringify!(methodIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invokerIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethodIndices),
            "::",
            stringify!(invokerIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjustorThunkIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethodIndices),
            "::",
            stringify!(adjustorThunkIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericMethodFunctionsDefinitions {
    pub genericMethodIndex: GenericMethodIndex,
    pub indices: Il2CppGenericMethodIndices,
}
#[test]
fn bindgen_test_layout_Il2CppGenericMethodFunctionsDefinitions() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGenericMethodFunctionsDefinitions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericMethodFunctionsDefinitions>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppGenericMethodFunctionsDefinitions)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericMethodFunctionsDefinitions>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppGenericMethodFunctionsDefinitions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericMethodIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethodFunctionsDefinitions),
            "::",
            stringify!(genericMethodIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indices) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethodFunctionsDefinitions),
            "::",
            stringify!(indices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ___Il2CppMetadataImageHandle {
    _unused: [u8; 0],
}
pub type Il2CppMetadataImageHandle = *const ___Il2CppMetadataImageHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ___Il2CppMetadataCustomAttributeHandle {
    _unused: [u8; 0],
}
pub type Il2CppMetadataCustomAttributeHandle = *const ___Il2CppMetadataCustomAttributeHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ___Il2CppMetadataTypeHandle {
    _unused: [u8; 0],
}
pub type Il2CppMetadataTypeHandle = *const ___Il2CppMetadataTypeHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ___Il2CppMetadataMethodHandle {
    _unused: [u8; 0],
}
pub type Il2CppMetadataMethodDefinitionHandle = *const ___Il2CppMetadataMethodHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ___Il2CppMetadataGenericContainerHandle {
    _unused: [u8; 0],
}
pub type Il2CppMetadataGenericContainerHandle = *const ___Il2CppMetadataGenericContainerHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ___Il2CppMetadataGenericParameterHandle {
    _unused: [u8; 0],
}
pub type Il2CppMetadataGenericParameterHandle = *const ___Il2CppMetadataGenericParameterHandle;
pub type EncodedMethodIndex = u32;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageInvalid: Il2CppMetadataUsage = 0;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageTypeInfo: Il2CppMetadataUsage = 1;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageIl2CppType: Il2CppMetadataUsage = 2;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageMethodDef: Il2CppMetadataUsage = 3;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageFieldInfo: Il2CppMetadataUsage = 4;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageStringLiteral: Il2CppMetadataUsage = 5;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageMethodRef: Il2CppMetadataUsage = 6;
pub type Il2CppMetadataUsage = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppInterfaceOffsetPair {
    pub interfaceTypeIndex: TypeIndex,
    pub offset: i32,
}
#[test]
fn bindgen_test_layout_Il2CppInterfaceOffsetPair() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppInterfaceOffsetPair> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppInterfaceOffsetPair>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppInterfaceOffsetPair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppInterfaceOffsetPair>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppInterfaceOffsetPair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaceTypeIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInterfaceOffsetPair),
            "::",
            stringify!(interfaceTypeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInterfaceOffsetPair),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTypeDefinition {
    pub nameIndex: StringIndex,
    pub namespaceIndex: StringIndex,
    pub byvalTypeIndex: TypeIndex,
    pub declaringTypeIndex: TypeIndex,
    pub parentIndex: TypeIndex,
    pub elementTypeIndex: TypeIndex,
    pub genericContainerIndex: GenericContainerIndex,
    pub flags: u32,
    pub fieldStart: FieldIndex,
    pub methodStart: MethodIndex,
    pub eventStart: EventIndex,
    pub propertyStart: PropertyIndex,
    pub nestedTypesStart: NestedTypeIndex,
    pub interfacesStart: InterfacesIndex,
    pub vtableStart: VTableIndex,
    pub interfaceOffsetsStart: InterfacesIndex,
    pub method_count: u16,
    pub property_count: u16,
    pub field_count: u16,
    pub event_count: u16,
    pub nested_type_count: u16,
    pub vtable_count: u16,
    pub interfaces_count: u16,
    pub interface_offsets_count: u16,
    pub bitfield: u32,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppTypeDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppTypeDefinition> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppTypeDefinition>(),
        88usize,
        concat!("Size of: ", stringify!(Il2CppTypeDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTypeDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppTypeDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namespaceIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(namespaceIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byvalTypeIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(byvalTypeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).declaringTypeIndex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(declaringTypeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(parentIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elementTypeIndex) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(elementTypeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericContainerIndex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(genericContainerIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldStart) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(fieldStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodStart) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(methodStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventStart) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(eventStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propertyStart) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(propertyStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nestedTypesStart) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(nestedTypesStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfacesStart) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(interfacesStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtableStart) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(vtableStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaceOffsetsStart) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(interfaceOffsetsStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_count) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(method_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_count) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(property_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_count) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(field_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_count) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(event_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nested_type_count) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(nested_type_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable_count) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(vtable_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaces_count) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(interfaces_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_offsets_count) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(interface_offsets_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitfield) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(bitfield)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppFieldDefinition {
    pub nameIndex: StringIndex,
    pub typeIndex: TypeIndex,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppFieldDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppFieldDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppFieldDefinition>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppFieldDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppFieldDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppFieldDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefinition),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefinition),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppFieldDefaultValue {
    pub fieldIndex: FieldIndex,
    pub typeIndex: TypeIndex,
    pub dataIndex: DefaultValueDataIndex,
}
#[test]
fn bindgen_test_layout_Il2CppFieldDefaultValue() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppFieldDefaultValue> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppFieldDefaultValue>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppFieldDefaultValue))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppFieldDefaultValue>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppFieldDefaultValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefaultValue),
            "::",
            stringify!(fieldIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefaultValue),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefaultValue),
            "::",
            stringify!(dataIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppFieldMarshaledSize {
    pub fieldIndex: FieldIndex,
    pub typeIndex: TypeIndex,
    pub size: i32,
}
#[test]
fn bindgen_test_layout_Il2CppFieldMarshaledSize() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppFieldMarshaledSize> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppFieldMarshaledSize>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppFieldMarshaledSize))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppFieldMarshaledSize>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppFieldMarshaledSize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldMarshaledSize),
            "::",
            stringify!(fieldIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldMarshaledSize),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldMarshaledSize),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppFieldRef {
    pub typeIndex: TypeIndex,
    pub fieldIndex: FieldIndex,
}
#[test]
fn bindgen_test_layout_Il2CppFieldRef() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppFieldRef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppFieldRef>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppFieldRef))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppFieldRef>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppFieldRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldRef),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldRef),
            "::",
            stringify!(fieldIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppParameterDefinition {
    pub nameIndex: StringIndex,
    pub token: u32,
    pub typeIndex: TypeIndex,
}
#[test]
fn bindgen_test_layout_Il2CppParameterDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppParameterDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppParameterDefinition>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppParameterDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppParameterDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppParameterDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefinition),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefinition),
            "::",
            stringify!(typeIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppParameterDefaultValue {
    pub parameterIndex: ParameterIndex,
    pub typeIndex: TypeIndex,
    pub dataIndex: DefaultValueDataIndex,
}
#[test]
fn bindgen_test_layout_Il2CppParameterDefaultValue() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppParameterDefaultValue> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppParameterDefaultValue>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppParameterDefaultValue))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppParameterDefaultValue>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppParameterDefaultValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameterIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefaultValue),
            "::",
            stringify!(parameterIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefaultValue),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefaultValue),
            "::",
            stringify!(dataIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodDefinition {
    pub nameIndex: StringIndex,
    pub declaringType: TypeDefinitionIndex,
    pub returnType: TypeIndex,
    pub parameterStart: ParameterIndex,
    pub genericContainerIndex: GenericContainerIndex,
    pub token: u32,
    pub flags: u16,
    pub iflags: u16,
    pub slot: u16,
    pub parameterCount: u16,
}
#[test]
fn bindgen_test_layout_Il2CppMethodDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMethodDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodDefinition>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppMethodDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMethodDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).declaringType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(declaringType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returnType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(returnType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameterStart) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(parameterStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericContainerIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(genericContainerIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iflags) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(iflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameterCount) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(parameterCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppEventDefinition {
    pub nameIndex: StringIndex,
    pub typeIndex: TypeIndex,
    pub add: MethodIndex,
    pub remove: MethodIndex,
    pub raise: MethodIndex,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppEventDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppEventDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppEventDefinition>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppEventDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppEventDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppEventDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remove) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raise) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(raise)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppPropertyDefinition {
    pub nameIndex: StringIndex,
    pub get: MethodIndex,
    pub set: MethodIndex,
    pub attrs: u32,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppPropertyDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppPropertyDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppPropertyDefinition>(),
        20usize,
        concat!("Size of: ", stringify!(Il2CppPropertyDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppPropertyDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppPropertyDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyDefinition),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyDefinition),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyDefinition),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyDefinition),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppStringLiteral {
    pub length: u32,
    pub dataIndex: StringLiteralIndex,
}
#[test]
fn bindgen_test_layout_Il2CppStringLiteral() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppStringLiteral> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppStringLiteral>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppStringLiteral))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStringLiteral>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppStringLiteral))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringLiteral),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringLiteral),
            "::",
            stringify!(dataIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppAssemblyNameDefinition {
    pub nameIndex: StringIndex,
    pub cultureIndex: StringIndex,
    pub publicKeyIndex: StringIndex,
    pub hash_alg: u32,
    pub hash_len: i32,
    pub flags: u32,
    pub major: i32,
    pub minor: i32,
    pub build: i32,
    pub revision: i32,
    pub public_key_token: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_Il2CppAssemblyNameDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppAssemblyNameDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppAssemblyNameDefinition>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppAssemblyNameDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAssemblyNameDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppAssemblyNameDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cultureIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(cultureIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).publicKeyIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(publicKeyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash_alg) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(hash_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(hash_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).build) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(build)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).public_key_token) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(public_key_token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppImageDefinition {
    pub nameIndex: StringIndex,
    pub assemblyIndex: AssemblyIndex,
    pub typeStart: TypeDefinitionIndex,
    pub typeCount: u32,
    pub exportedTypeStart: TypeDefinitionIndex,
    pub exportedTypeCount: u32,
    pub entryPointIndex: MethodIndex,
    pub token: u32,
    pub customAttributeStart: CustomAttributeIndex,
    pub customAttributeCount: u32,
}
#[test]
fn bindgen_test_layout_Il2CppImageDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppImageDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppImageDefinition>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppImageDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppImageDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppImageDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assemblyIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(assemblyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeStart) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(typeStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(typeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exportedTypeStart) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(exportedTypeStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exportedTypeCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(exportedTypeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entryPointIndex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(entryPointIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customAttributeStart) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(customAttributeStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customAttributeCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(customAttributeCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppAssemblyDefinition {
    pub imageIndex: ImageIndex,
    pub token: u32,
    pub referencedAssemblyStart: i32,
    pub referencedAssemblyCount: i32,
    pub aname: Il2CppAssemblyNameDefinition,
}
#[test]
fn bindgen_test_layout_Il2CppAssemblyDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppAssemblyDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppAssemblyDefinition>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppAssemblyDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAssemblyDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppAssemblyDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyDefinition),
            "::",
            stringify!(imageIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyDefinition),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referencedAssemblyStart) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyDefinition),
            "::",
            stringify!(referencedAssemblyStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referencedAssemblyCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyDefinition),
            "::",
            stringify!(referencedAssemblyCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyDefinition),
            "::",
            stringify!(aname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppCustomAttributeTypeRange {
    pub token: u32,
    pub start: i32,
    pub count: i32,
}
#[test]
fn bindgen_test_layout_Il2CppCustomAttributeTypeRange() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppCustomAttributeTypeRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppCustomAttributeTypeRange>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppCustomAttributeTypeRange))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCustomAttributeTypeRange>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppCustomAttributeTypeRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCustomAttributeTypeRange),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCustomAttributeTypeRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCustomAttributeTypeRange),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataRange {
    pub start: i32,
    pub length: i32,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataRange() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMetadataRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataRange>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppMetadataRange))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataRange>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRange),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericContainer {
    pub ownerIndex: i32,
    pub type_argc: i32,
    pub is_method: i32,
    pub genericParameterStart: GenericParameterIndex,
}
#[test]
fn bindgen_test_layout_Il2CppGenericContainer() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGenericContainer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericContainer>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGenericContainer))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericContainer>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppGenericContainer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ownerIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContainer),
            "::",
            stringify!(ownerIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_argc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContainer),
            "::",
            stringify!(type_argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_method) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContainer),
            "::",
            stringify!(is_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericParameterStart) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContainer),
            "::",
            stringify!(genericParameterStart)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericParameter {
    pub ownerIndex: GenericContainerIndex,
    pub nameIndex: StringIndex,
    pub constraintsStart: GenericParameterConstraintIndex,
    pub constraintsCount: i16,
    pub num: u16,
    pub flags: u16,
}
#[test]
fn bindgen_test_layout_Il2CppGenericParameter() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGenericParameter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericParameter>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGenericParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericParameter>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppGenericParameter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ownerIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(ownerIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constraintsStart) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(constraintsStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constraintsCount) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(constraintsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWindowsRuntimeTypeNamePair {
    pub nameIndex: StringIndex,
    pub typeIndex: TypeIndex,
}
#[test]
fn bindgen_test_layout_Il2CppWindowsRuntimeTypeNamePair() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppWindowsRuntimeTypeNamePair> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppWindowsRuntimeTypeNamePair>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppWindowsRuntimeTypeNamePair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWindowsRuntimeTypeNamePair>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWindowsRuntimeTypeNamePair)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWindowsRuntimeTypeNamePair),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWindowsRuntimeTypeNamePair),
            "::",
            stringify!(typeIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGlobalMetadataHeader {
    pub sanity: i32,
    pub version: i32,
    pub stringLiteralOffset: i32,
    pub stringLiteralCount: i32,
    pub stringLiteralDataOffset: i32,
    pub stringLiteralDataCount: i32,
    pub stringOffset: i32,
    pub stringCount: i32,
    pub eventsOffset: i32,
    pub eventsCount: i32,
    pub propertiesOffset: i32,
    pub propertiesCount: i32,
    pub methodsOffset: i32,
    pub methodsCount: i32,
    pub parameterDefaultValuesOffset: i32,
    pub parameterDefaultValuesCount: i32,
    pub fieldDefaultValuesOffset: i32,
    pub fieldDefaultValuesCount: i32,
    pub fieldAndParameterDefaultValueDataOffset: i32,
    pub fieldAndParameterDefaultValueDataCount: i32,
    pub fieldMarshaledSizesOffset: i32,
    pub fieldMarshaledSizesCount: i32,
    pub parametersOffset: i32,
    pub parametersCount: i32,
    pub fieldsOffset: i32,
    pub fieldsCount: i32,
    pub genericParametersOffset: i32,
    pub genericParametersCount: i32,
    pub genericParameterConstraintsOffset: i32,
    pub genericParameterConstraintsCount: i32,
    pub genericContainersOffset: i32,
    pub genericContainersCount: i32,
    pub nestedTypesOffset: i32,
    pub nestedTypesCount: i32,
    pub interfacesOffset: i32,
    pub interfacesCount: i32,
    pub vtableMethodsOffset: i32,
    pub vtableMethodsCount: i32,
    pub interfaceOffsetsOffset: i32,
    pub interfaceOffsetsCount: i32,
    pub typeDefinitionsOffset: i32,
    pub typeDefinitionsCount: i32,
    pub imagesOffset: i32,
    pub imagesCount: i32,
    pub assembliesOffset: i32,
    pub assembliesCount: i32,
    pub fieldRefsOffset: i32,
    pub fieldRefsCount: i32,
    pub referencedAssembliesOffset: i32,
    pub referencedAssembliesCount: i32,
    pub attributesInfoOffset: i32,
    pub attributesInfoCount: i32,
    pub attributeTypesOffset: i32,
    pub attributeTypesCount: i32,
    pub unresolvedVirtualCallParameterTypesOffset: i32,
    pub unresolvedVirtualCallParameterTypesCount: i32,
    pub unresolvedVirtualCallParameterRangesOffset: i32,
    pub unresolvedVirtualCallParameterRangesCount: i32,
    pub windowsRuntimeTypeNamesOffset: i32,
    pub windowsRuntimeTypeNamesSize: i32,
    pub windowsRuntimeStringsOffset: i32,
    pub windowsRuntimeStringsSize: i32,
    pub exportedTypeDefinitionsOffset: i32,
    pub exportedTypeDefinitionsCount: i32,
}
#[test]
fn bindgen_test_layout_Il2CppGlobalMetadataHeader() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGlobalMetadataHeader> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGlobalMetadataHeader>(),
        256usize,
        concat!("Size of: ", stringify!(Il2CppGlobalMetadataHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGlobalMetadataHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppGlobalMetadataHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sanity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(sanity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringLiteralOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringLiteralOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringLiteralCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringLiteralCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringLiteralDataOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringLiteralDataOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringLiteralDataCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringLiteralDataCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventsOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(eventsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventsCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(eventsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propertiesOffset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(propertiesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propertiesCount) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(propertiesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodsOffset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(methodsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodsCount) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(methodsCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).parameterDefaultValuesOffset) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(parameterDefaultValuesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameterDefaultValuesCount) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(parameterDefaultValuesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldDefaultValuesOffset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldDefaultValuesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldDefaultValuesCount) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldDefaultValuesCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fieldAndParameterDefaultValueDataOffset) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldAndParameterDefaultValueDataOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fieldAndParameterDefaultValueDataCount) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldAndParameterDefaultValueDataCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldMarshaledSizesOffset) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldMarshaledSizesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldMarshaledSizesCount) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldMarshaledSizesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parametersOffset) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(parametersOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parametersCount) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(parametersCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldsOffset) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldsCount) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericParametersOffset) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericParametersOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericParametersCount) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericParametersCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).genericParameterConstraintsOffset) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericParameterConstraintsOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).genericParameterConstraintsCount) as usize - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericParameterConstraintsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericContainersOffset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericContainersOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericContainersCount) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericContainersCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nestedTypesOffset) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(nestedTypesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nestedTypesCount) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(nestedTypesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfacesOffset) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(interfacesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfacesCount) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(interfacesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtableMethodsOffset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(vtableMethodsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtableMethodsCount) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(vtableMethodsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaceOffsetsOffset) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(interfaceOffsetsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaceOffsetsCount) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(interfaceOffsetsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeDefinitionsOffset) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(typeDefinitionsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeDefinitionsCount) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(typeDefinitionsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imagesOffset) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(imagesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imagesCount) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(imagesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assembliesOffset) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(assembliesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assembliesCount) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(assembliesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldRefsOffset) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldRefsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldRefsCount) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldRefsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referencedAssembliesOffset) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(referencedAssembliesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referencedAssembliesCount) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(referencedAssembliesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributesInfoOffset) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(attributesInfoOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributesInfoCount) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(attributesInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeTypesOffset) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(attributeTypesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeTypesCount) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(attributeTypesCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unresolvedVirtualCallParameterTypesOffset) as usize
                - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(unresolvedVirtualCallParameterTypesOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unresolvedVirtualCallParameterTypesCount) as usize
                - ptr as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(unresolvedVirtualCallParameterTypesCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unresolvedVirtualCallParameterRangesOffset) as usize
                - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(unresolvedVirtualCallParameterRangesOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unresolvedVirtualCallParameterRangesCount) as usize
                - ptr as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(unresolvedVirtualCallParameterRangesCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).windowsRuntimeTypeNamesOffset) as usize - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(windowsRuntimeTypeNamesOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowsRuntimeTypeNamesSize) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(windowsRuntimeTypeNamesSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowsRuntimeStringsOffset) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(windowsRuntimeStringsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowsRuntimeStringsSize) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(windowsRuntimeStringsSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exportedTypeDefinitionsOffset) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(exportedTypeDefinitionsOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exportedTypeDefinitionsCount) as usize - ptr as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(exportedTypeDefinitionsCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataField {
    pub offset: u32,
    pub typeIndex: u32,
    pub name: *const ::std::os::raw::c_char,
    pub isStatic: u8,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataField() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMetadataField> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataField>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppMetadataField))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataField>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataField))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataField),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataField),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataField),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isStatic) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataField),
            "::",
            stringify!(isStatic)
        )
    );
}
pub const Il2CppMetadataTypeFlags_kNone: Il2CppMetadataTypeFlags = 0;
pub const Il2CppMetadataTypeFlags_kValueType: Il2CppMetadataTypeFlags = 1;
pub const Il2CppMetadataTypeFlags_kArray: Il2CppMetadataTypeFlags = 2;
pub const Il2CppMetadataTypeFlags_kArrayRankMask: Il2CppMetadataTypeFlags = -65536;
pub type Il2CppMetadataTypeFlags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataType {
    pub flags: Il2CppMetadataTypeFlags,
    pub fields: *mut Il2CppMetadataField,
    pub fieldCount: u32,
    pub staticsSize: u32,
    pub statics: *mut u8,
    pub baseOrElementTypeIndex: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub assemblyName: *const ::std::os::raw::c_char,
    pub typeInfoAddress: u64,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataType() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMetadataType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataType>(),
        72usize,
        concat!("Size of: ", stringify!(Il2CppMetadataType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataType),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataType),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataType),
            "::",
            stringify!(fieldCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).staticsSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataType),
            "::",
            stringify!(staticsSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).statics) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataType),
            "::",
            stringify!(statics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseOrElementTypeIndex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataType),
            "::",
            stringify!(baseOrElementTypeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assemblyName) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataType),
            "::",
            stringify!(assemblyName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeInfoAddress) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataType),
            "::",
            stringify!(typeInfoAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataType),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataSnapshot {
    pub typeCount: u32,
    pub types: *mut Il2CppMetadataType,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataSnapshot() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMetadataSnapshot> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataSnapshot>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppMetadataSnapshot))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataSnapshot>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataSnapshot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataSnapshot),
            "::",
            stringify!(typeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataSnapshot),
            "::",
            stringify!(types)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppManagedMemorySection {
    pub sectionStartAddress: u64,
    pub sectionSize: u32,
    pub sectionBytes: *mut u8,
}
#[test]
fn bindgen_test_layout_Il2CppManagedMemorySection() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppManagedMemorySection> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppManagedMemorySection>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppManagedMemorySection))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppManagedMemorySection>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppManagedMemorySection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionStartAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedMemorySection),
            "::",
            stringify!(sectionStartAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedMemorySection),
            "::",
            stringify!(sectionSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedMemorySection),
            "::",
            stringify!(sectionBytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppManagedHeap {
    pub sectionCount: u32,
    pub sections: *mut Il2CppManagedMemorySection,
}
#[test]
fn bindgen_test_layout_Il2CppManagedHeap() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppManagedHeap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppManagedHeap>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppManagedHeap))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppManagedHeap>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppManagedHeap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedHeap),
            "::",
            stringify!(sectionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedHeap),
            "::",
            stringify!(sections)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppStacks {
    pub stackCount: u32,
    pub stacks: *mut Il2CppManagedMemorySection,
}
#[test]
fn bindgen_test_layout_Il2CppStacks() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppStacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppStacks>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppStacks))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStacks>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppStacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stackCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStacks),
            "::",
            stringify!(stackCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stacks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStacks),
            "::",
            stringify!(stacks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeObject {
    pub gcHandleIndex: u32,
    pub size: u32,
    pub instanceId: u32,
    pub classId: u32,
    pub referencedNativeObjectIndicesCount: u32,
    pub referencedNativeObjectIndices: *mut u32,
}
#[test]
fn bindgen_test_layout_NativeObject() {
    const UNINIT: ::std::mem::MaybeUninit<NativeObject> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NativeObject>(),
        32usize,
        concat!("Size of: ", stringify!(NativeObject))
    );
    assert_eq!(
        ::std::mem::align_of::<NativeObject>(),
        8usize,
        concat!("Alignment of ", stringify!(NativeObject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gcHandleIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NativeObject),
            "::",
            stringify!(gcHandleIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NativeObject),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instanceId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NativeObject),
            "::",
            stringify!(instanceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classId) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NativeObject),
            "::",
            stringify!(classId)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).referencedNativeObjectIndicesCount) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NativeObject),
            "::",
            stringify!(referencedNativeObjectIndicesCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).referencedNativeObjectIndices) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NativeObject),
            "::",
            stringify!(referencedNativeObjectIndices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGCHandles {
    pub trackedObjectCount: u32,
    pub pointersToObjects: *mut u64,
}
#[test]
fn bindgen_test_layout_Il2CppGCHandles() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGCHandles> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGCHandles>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGCHandles))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGCHandles>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppGCHandles))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trackedObjectCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGCHandles),
            "::",
            stringify!(trackedObjectCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointersToObjects) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGCHandles),
            "::",
            stringify!(pointersToObjects)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppRuntimeInformation {
    pub pointerSize: u32,
    pub objectHeaderSize: u32,
    pub arrayHeaderSize: u32,
    pub arrayBoundsOffsetInHeader: u32,
    pub arraySizeOffsetInHeader: u32,
    pub allocationGranularity: u32,
}
#[test]
fn bindgen_test_layout_Il2CppRuntimeInformation() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppRuntimeInformation> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppRuntimeInformation>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppRuntimeInformation))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRuntimeInformation>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppRuntimeInformation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointerSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeInformation),
            "::",
            stringify!(pointerSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectHeaderSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeInformation),
            "::",
            stringify!(objectHeaderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayHeaderSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeInformation),
            "::",
            stringify!(arrayHeaderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayBoundsOffsetInHeader) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeInformation),
            "::",
            stringify!(arrayBoundsOffsetInHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arraySizeOffsetInHeader) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeInformation),
            "::",
            stringify!(arraySizeOffsetInHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationGranularity) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeInformation),
            "::",
            stringify!(allocationGranularity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppManagedMemorySnapshot {
    pub heap: Il2CppManagedHeap,
    pub stacks: Il2CppStacks,
    pub metadata: Il2CppMetadataSnapshot,
    pub gcHandles: Il2CppGCHandles,
    pub runtimeInformation: Il2CppRuntimeInformation,
    pub additionalUserInformation: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppManagedMemorySnapshot() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppManagedMemorySnapshot> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppManagedMemorySnapshot>(),
        96usize,
        concat!("Size of: ", stringify!(Il2CppManagedMemorySnapshot))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppManagedMemorySnapshot>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppManagedMemorySnapshot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedMemorySnapshot),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stacks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedMemorySnapshot),
            "::",
            stringify!(stacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedMemorySnapshot),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gcHandles) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedMemorySnapshot),
            "::",
            stringify!(gcHandles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runtimeInformation) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedMemorySnapshot),
            "::",
            stringify!(runtimeInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).additionalUserInformation) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManagedMemorySnapshot),
            "::",
            stringify!(additionalUserInformation)
        )
    );
}
pub const Il2CppTypeEnum_IL2CPP_TYPE_END: Il2CppTypeEnum = 0;
pub const Il2CppTypeEnum_IL2CPP_TYPE_VOID: Il2CppTypeEnum = 1;
pub const Il2CppTypeEnum_IL2CPP_TYPE_BOOLEAN: Il2CppTypeEnum = 2;
pub const Il2CppTypeEnum_IL2CPP_TYPE_CHAR: Il2CppTypeEnum = 3;
pub const Il2CppTypeEnum_IL2CPP_TYPE_I1: Il2CppTypeEnum = 4;
pub const Il2CppTypeEnum_IL2CPP_TYPE_U1: Il2CppTypeEnum = 5;
pub const Il2CppTypeEnum_IL2CPP_TYPE_I2: Il2CppTypeEnum = 6;
pub const Il2CppTypeEnum_IL2CPP_TYPE_U2: Il2CppTypeEnum = 7;
pub const Il2CppTypeEnum_IL2CPP_TYPE_I4: Il2CppTypeEnum = 8;
pub const Il2CppTypeEnum_IL2CPP_TYPE_U4: Il2CppTypeEnum = 9;
pub const Il2CppTypeEnum_IL2CPP_TYPE_I8: Il2CppTypeEnum = 10;
pub const Il2CppTypeEnum_IL2CPP_TYPE_U8: Il2CppTypeEnum = 11;
pub const Il2CppTypeEnum_IL2CPP_TYPE_R4: Il2CppTypeEnum = 12;
pub const Il2CppTypeEnum_IL2CPP_TYPE_R8: Il2CppTypeEnum = 13;
pub const Il2CppTypeEnum_IL2CPP_TYPE_STRING: Il2CppTypeEnum = 14;
pub const Il2CppTypeEnum_IL2CPP_TYPE_PTR: Il2CppTypeEnum = 15;
pub const Il2CppTypeEnum_IL2CPP_TYPE_BYREF: Il2CppTypeEnum = 16;
pub const Il2CppTypeEnum_IL2CPP_TYPE_VALUETYPE: Il2CppTypeEnum = 17;
pub const Il2CppTypeEnum_IL2CPP_TYPE_CLASS: Il2CppTypeEnum = 18;
pub const Il2CppTypeEnum_IL2CPP_TYPE_VAR: Il2CppTypeEnum = 19;
pub const Il2CppTypeEnum_IL2CPP_TYPE_ARRAY: Il2CppTypeEnum = 20;
pub const Il2CppTypeEnum_IL2CPP_TYPE_GENERICINST: Il2CppTypeEnum = 21;
pub const Il2CppTypeEnum_IL2CPP_TYPE_TYPEDBYREF: Il2CppTypeEnum = 22;
pub const Il2CppTypeEnum_IL2CPP_TYPE_I: Il2CppTypeEnum = 24;
pub const Il2CppTypeEnum_IL2CPP_TYPE_U: Il2CppTypeEnum = 25;
pub const Il2CppTypeEnum_IL2CPP_TYPE_FNPTR: Il2CppTypeEnum = 27;
pub const Il2CppTypeEnum_IL2CPP_TYPE_OBJECT: Il2CppTypeEnum = 28;
pub const Il2CppTypeEnum_IL2CPP_TYPE_SZARRAY: Il2CppTypeEnum = 29;
pub const Il2CppTypeEnum_IL2CPP_TYPE_MVAR: Il2CppTypeEnum = 30;
pub const Il2CppTypeEnum_IL2CPP_TYPE_CMOD_REQD: Il2CppTypeEnum = 31;
pub const Il2CppTypeEnum_IL2CPP_TYPE_CMOD_OPT: Il2CppTypeEnum = 32;
pub const Il2CppTypeEnum_IL2CPP_TYPE_INTERNAL: Il2CppTypeEnum = 33;
pub const Il2CppTypeEnum_IL2CPP_TYPE_MODIFIER: Il2CppTypeEnum = 64;
pub const Il2CppTypeEnum_IL2CPP_TYPE_SENTINEL: Il2CppTypeEnum = 65;
pub const Il2CppTypeEnum_IL2CPP_TYPE_PINNED: Il2CppTypeEnum = 69;
pub const Il2CppTypeEnum_IL2CPP_TYPE_ENUM: Il2CppTypeEnum = 85;
pub type Il2CppTypeEnum = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppArrayType {
    pub etype: *const Il2CppType,
    pub rank: u8,
    pub numsizes: u8,
    pub numlobounds: u8,
    pub sizes: *mut ::std::os::raw::c_int,
    pub lobounds: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Il2CppArrayType() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppArrayType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppArrayType>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppArrayType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppArrayType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppArrayType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).etype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(etype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rank) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsizes) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(numsizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numlobounds) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(numlobounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lobounds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(lobounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericInst {
    pub type_argc: u32,
    pub type_argv: *mut *const Il2CppType,
}
#[test]
fn bindgen_test_layout_Il2CppGenericInst() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGenericInst> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericInst>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGenericInst))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericInst>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppGenericInst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_argc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericInst),
            "::",
            stringify!(type_argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_argv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericInst),
            "::",
            stringify!(type_argv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericContext {
    pub class_inst: *const Il2CppGenericInst,
    pub method_inst: *const Il2CppGenericInst,
}
#[test]
fn bindgen_test_layout_Il2CppGenericContext() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGenericContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericContext>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGenericContext))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericContext>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppGenericContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_inst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContext),
            "::",
            stringify!(class_inst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_inst) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContext),
            "::",
            stringify!(method_inst)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericClass {
    pub type_: *const Il2CppType,
    pub context: Il2CppGenericContext,
    pub cached_class: *mut Il2CppClass,
}
#[test]
fn bindgen_test_layout_Il2CppGenericClass() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGenericClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericClass>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppGenericClass))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericClass>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppGenericClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericClass),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericClass),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cached_class) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericClass),
            "::",
            stringify!(cached_class)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericMethod {
    pub methodDefinition: *const MethodInfo,
    pub context: Il2CppGenericContext,
}
#[test]
fn bindgen_test_layout_Il2CppGenericMethod() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGenericMethod> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericMethod>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppGenericMethod))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericMethod>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppGenericMethod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodDefinition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethod),
            "::",
            stringify!(methodDefinition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethod),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppType {
    pub data: Il2CppType__bindgen_ty_1,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppType__bindgen_ty_1 {
    pub dummy: *mut ::std::os::raw::c_void,
    pub __klassIndex: TypeDefinitionIndex,
    pub typeHandle: Il2CppMetadataTypeHandle,
    pub type_: *const Il2CppType,
    pub array: *mut Il2CppArrayType,
    pub __genericParameterIndex: GenericParameterIndex,
    pub genericParameterHandle: Il2CppMetadataGenericParameterHandle,
    pub generic_class: *mut Il2CppGenericClass,
}
#[test]
fn bindgen_test_layout_Il2CppType__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppType__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppType__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppType__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppType__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppType__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__klassIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(__klassIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(typeHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__genericParameterIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(__genericParameterIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericParameterHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(genericParameterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic_class) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(generic_class)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppType() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppType>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType),
            "::",
            stringify!(data)
        )
    );
}
impl Il2CppType {
    #[inline]
    pub fn attrs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_attrs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> Il2CppTypeEnum {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: Il2CppTypeEnum) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn num_mods(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_num_mods(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn byref(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_byref(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pinned(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pinned(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        attrs: ::std::os::raw::c_uint,
        type_: Il2CppTypeEnum,
        num_mods: ::std::os::raw::c_uint,
        byref: ::std::os::raw::c_uint,
        pinned: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let attrs: u32 = unsafe { ::std::mem::transmute(attrs) };
            attrs as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(24usize, 6u8, {
            let num_mods: u32 = unsafe { ::std::mem::transmute(num_mods) };
            num_mods as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let byref: u32 = unsafe { ::std::mem::transmute(byref) };
            byref as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let pinned: u32 = unsafe { ::std::mem::transmute(pinned) };
            pinned as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataFieldInfo {
    pub type_: *const Il2CppType,
    pub name: *const ::std::os::raw::c_char,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataFieldInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMetadataFieldInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataFieldInfo>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppMetadataFieldInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataFieldInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataFieldInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataFieldInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataFieldInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataFieldInfo),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataMethodInfo {
    pub handle: Il2CppMetadataMethodDefinitionHandle,
    pub name: *const ::std::os::raw::c_char,
    pub return_type: *const Il2CppType,
    pub token: u32,
    pub flags: u16,
    pub iflags: u16,
    pub slot: u16,
    pub parameterCount: u16,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataMethodInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMetadataMethodInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataMethodInfo>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppMetadataMethodInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataMethodInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataMethodInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataMethodInfo),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataMethodInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataMethodInfo),
            "::",
            stringify!(return_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataMethodInfo),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataMethodInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iflags) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataMethodInfo),
            "::",
            stringify!(iflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataMethodInfo),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameterCount) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataMethodInfo),
            "::",
            stringify!(parameterCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataParameterInfo {
    pub name: *const ::std::os::raw::c_char,
    pub token: u32,
    pub type_: *const Il2CppType,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataParameterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMetadataParameterInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataParameterInfo>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppMetadataParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataParameterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataParameterInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataParameterInfo),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataParameterInfo),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataPropertyInfo {
    pub name: *const ::std::os::raw::c_char,
    pub get: *const MethodInfo,
    pub set: *const MethodInfo,
    pub attrs: u32,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataPropertyInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMetadataPropertyInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataPropertyInfo>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppMetadataPropertyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataPropertyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataPropertyInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataPropertyInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataPropertyInfo),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataPropertyInfo),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataPropertyInfo),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataPropertyInfo),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataEventInfo {
    pub name: *const ::std::os::raw::c_char,
    pub type_: *const Il2CppType,
    pub add: *const MethodInfo,
    pub remove: *const MethodInfo,
    pub raise: *const MethodInfo,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataEventInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMetadataEventInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataEventInfo>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppMetadataEventInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataEventInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataEventInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataEventInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataEventInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataEventInfo),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remove) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataEventInfo),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raise) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataEventInfo),
            "::",
            stringify!(raise)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataEventInfo),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppInterfaceOffsetInfo {
    pub interfaceType: *const Il2CppType,
    pub offset: i32,
}
#[test]
fn bindgen_test_layout_Il2CppInterfaceOffsetInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppInterfaceOffsetInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppInterfaceOffsetInfo>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppInterfaceOffsetInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppInterfaceOffsetInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppInterfaceOffsetInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaceType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInterfaceOffsetInfo),
            "::",
            stringify!(interfaceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInterfaceOffsetInfo),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericParameterInfo {
    pub containerHandle: Il2CppMetadataGenericContainerHandle,
    pub name: *const ::std::os::raw::c_char,
    pub num: u16,
    pub flags: u16,
}
#[test]
fn bindgen_test_layout_Il2CppGenericParameterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGenericParameterInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericParameterInfo>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppGenericParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppGenericParameterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).containerHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameterInfo),
            "::",
            stringify!(containerHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameterInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameterInfo),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameterInfo),
            "::",
            stringify!(flags)
        )
    );
}
pub const Il2CppCallConvention_IL2CPP_CALL_DEFAULT: Il2CppCallConvention = 0;
pub const Il2CppCallConvention_IL2CPP_CALL_C: Il2CppCallConvention = 1;
pub const Il2CppCallConvention_IL2CPP_CALL_STDCALL: Il2CppCallConvention = 2;
pub const Il2CppCallConvention_IL2CPP_CALL_THISCALL: Il2CppCallConvention = 3;
pub const Il2CppCallConvention_IL2CPP_CALL_FASTCALL: Il2CppCallConvention = 4;
pub const Il2CppCallConvention_IL2CPP_CALL_VARARG: Il2CppCallConvention = 5;
pub type Il2CppCallConvention = ::std::os::raw::c_int;
pub const Il2CppCharSet_CHARSET_ANSI: Il2CppCharSet = 0;
pub const Il2CppCharSet_CHARSET_UNICODE: Il2CppCharSet = 1;
pub const Il2CppCharSet_CHARSET_NOT_SPECIFIED: Il2CppCharSet = 2;
pub type Il2CppCharSet = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppHString__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Il2CppHString__() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppHString__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppHString__>(),
        4usize,
        concat!("Size of: ", stringify!(Il2CppHString__))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppHString__>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppHString__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppHString__),
            "::",
            stringify!(unused)
        )
    );
}
pub type Il2CppHString = *mut Il2CppHString__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppHStringHeader {
    pub Reserved: Il2CppHStringHeader__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppHStringHeader__bindgen_ty_1 {
    pub Reserved1: *mut ::std::os::raw::c_void,
    pub Reserved2: [::std::os::raw::c_char; 24usize],
}
#[test]
fn bindgen_test_layout_Il2CppHStringHeader__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppHStringHeader__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppHStringHeader__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppHStringHeader__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppHStringHeader__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppHStringHeader__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppHStringHeader__bindgen_ty_1),
            "::",
            stringify!(Reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppHStringHeader__bindgen_ty_1),
            "::",
            stringify!(Reserved2)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppHStringHeader() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppHStringHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppHStringHeader>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppHStringHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppHStringHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppHStringHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppHStringHeader),
            "::",
            stringify!(Reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGuid {
    pub data1: u32,
    pub data2: u16,
    pub data3: u16,
    pub data4: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_Il2CppGuid() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppGuid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppGuid>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGuid))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGuid>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppGuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGuid),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGuid),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGuid),
            "::",
            stringify!(data3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGuid),
            "::",
            stringify!(data4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSafeArrayBound {
    pub element_count: u32,
    pub lower_bound: i32,
}
#[test]
fn bindgen_test_layout_Il2CppSafeArrayBound() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppSafeArrayBound> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppSafeArrayBound>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppSafeArrayBound))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSafeArrayBound>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppSafeArrayBound))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArrayBound),
            "::",
            stringify!(element_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lower_bound) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArrayBound),
            "::",
            stringify!(lower_bound)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSafeArray {
    pub dimension_count: u16,
    pub features: u16,
    pub element_size: u32,
    pub lock_count: u32,
    pub data: *mut ::std::os::raw::c_void,
    pub bounds: [Il2CppSafeArrayBound; 1usize],
}
#[test]
fn bindgen_test_layout_Il2CppSafeArray() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppSafeArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppSafeArray>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppSafeArray))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSafeArray>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSafeArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimension_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(dimension_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(lock_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(bounds)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppWin32Decimal {
    pub reserved: u16,
    pub u: Il2CppWin32Decimal__bindgen_ty_1,
    pub hi32: u32,
    pub u2: Il2CppWin32Decimal__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppWin32Decimal__bindgen_ty_1 {
    pub s: Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1,
    pub signscale: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1 {
    pub scale: u8,
    pub sign: u8,
}
#[test]
fn bindgen_test_layout_Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sign) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sign)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppWin32Decimal__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppWin32Decimal__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppWin32Decimal__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(Il2CppWin32Decimal__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWin32Decimal__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signscale) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1),
            "::",
            stringify!(signscale)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppWin32Decimal__bindgen_ty_2 {
    pub s2: Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1,
    pub lo64: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1 {
    pub lo32: u32,
    pub mid32: u32,
}
#[test]
fn bindgen_test_layout_Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(lo32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mid32) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(mid32)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppWin32Decimal__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppWin32Decimal__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppWin32Decimal__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppWin32Decimal__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWin32Decimal__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2),
            "::",
            stringify!(lo64)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppWin32Decimal() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppWin32Decimal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppWin32Decimal>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppWin32Decimal))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWin32Decimal>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppWin32Decimal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi32) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal),
            "::",
            stringify!(hi32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal),
            "::",
            stringify!(u2)
        )
    );
}
pub type IL2CPP_VARIANT_BOOL = i16;
pub const Il2CppVarType_IL2CPP_VT_EMPTY: Il2CppVarType = 0;
pub const Il2CppVarType_IL2CPP_VT_NULL: Il2CppVarType = 1;
pub const Il2CppVarType_IL2CPP_VT_I2: Il2CppVarType = 2;
pub const Il2CppVarType_IL2CPP_VT_I4: Il2CppVarType = 3;
pub const Il2CppVarType_IL2CPP_VT_R4: Il2CppVarType = 4;
pub const Il2CppVarType_IL2CPP_VT_R8: Il2CppVarType = 5;
pub const Il2CppVarType_IL2CPP_VT_CY: Il2CppVarType = 6;
pub const Il2CppVarType_IL2CPP_VT_DATE: Il2CppVarType = 7;
pub const Il2CppVarType_IL2CPP_VT_BSTR: Il2CppVarType = 8;
pub const Il2CppVarType_IL2CPP_VT_DISPATCH: Il2CppVarType = 9;
pub const Il2CppVarType_IL2CPP_VT_ERROR: Il2CppVarType = 10;
pub const Il2CppVarType_IL2CPP_VT_BOOL: Il2CppVarType = 11;
pub const Il2CppVarType_IL2CPP_VT_VARIANT: Il2CppVarType = 12;
pub const Il2CppVarType_IL2CPP_VT_UNKNOWN: Il2CppVarType = 13;
pub const Il2CppVarType_IL2CPP_VT_DECIMAL: Il2CppVarType = 14;
pub const Il2CppVarType_IL2CPP_VT_I1: Il2CppVarType = 16;
pub const Il2CppVarType_IL2CPP_VT_UI1: Il2CppVarType = 17;
pub const Il2CppVarType_IL2CPP_VT_UI2: Il2CppVarType = 18;
pub const Il2CppVarType_IL2CPP_VT_UI4: Il2CppVarType = 19;
pub const Il2CppVarType_IL2CPP_VT_I8: Il2CppVarType = 20;
pub const Il2CppVarType_IL2CPP_VT_UI8: Il2CppVarType = 21;
pub const Il2CppVarType_IL2CPP_VT_INT: Il2CppVarType = 22;
pub const Il2CppVarType_IL2CPP_VT_UINT: Il2CppVarType = 23;
pub const Il2CppVarType_IL2CPP_VT_VOID: Il2CppVarType = 24;
pub const Il2CppVarType_IL2CPP_VT_HRESULT: Il2CppVarType = 25;
pub const Il2CppVarType_IL2CPP_VT_PTR: Il2CppVarType = 26;
pub const Il2CppVarType_IL2CPP_VT_SAFEARRAY: Il2CppVarType = 27;
pub const Il2CppVarType_IL2CPP_VT_CARRAY: Il2CppVarType = 28;
pub const Il2CppVarType_IL2CPP_VT_USERDEFINED: Il2CppVarType = 29;
pub const Il2CppVarType_IL2CPP_VT_LPSTR: Il2CppVarType = 30;
pub const Il2CppVarType_IL2CPP_VT_LPWSTR: Il2CppVarType = 31;
pub const Il2CppVarType_IL2CPP_VT_RECORD: Il2CppVarType = 36;
pub const Il2CppVarType_IL2CPP_VT_INT_PTR: Il2CppVarType = 37;
pub const Il2CppVarType_IL2CPP_VT_UINT_PTR: Il2CppVarType = 38;
pub const Il2CppVarType_IL2CPP_VT_FILETIME: Il2CppVarType = 64;
pub const Il2CppVarType_IL2CPP_VT_BLOB: Il2CppVarType = 65;
pub const Il2CppVarType_IL2CPP_VT_STREAM: Il2CppVarType = 66;
pub const Il2CppVarType_IL2CPP_VT_STORAGE: Il2CppVarType = 67;
pub const Il2CppVarType_IL2CPP_VT_STREAMED_OBJECT: Il2CppVarType = 68;
pub const Il2CppVarType_IL2CPP_VT_STORED_OBJECT: Il2CppVarType = 69;
pub const Il2CppVarType_IL2CPP_VT_BLOB_OBJECT: Il2CppVarType = 70;
pub const Il2CppVarType_IL2CPP_VT_CF: Il2CppVarType = 71;
pub const Il2CppVarType_IL2CPP_VT_CLSID: Il2CppVarType = 72;
pub const Il2CppVarType_IL2CPP_VT_VERSIONED_STREAM: Il2CppVarType = 73;
pub const Il2CppVarType_IL2CPP_VT_BSTR_BLOB: Il2CppVarType = 4095;
pub const Il2CppVarType_IL2CPP_VT_VECTOR: Il2CppVarType = 4096;
pub const Il2CppVarType_IL2CPP_VT_ARRAY: Il2CppVarType = 8192;
pub const Il2CppVarType_IL2CPP_VT_BYREF: Il2CppVarType = 16384;
pub const Il2CppVarType_IL2CPP_VT_RESERVED: Il2CppVarType = 32768;
pub const Il2CppVarType_IL2CPP_VT_ILLEGAL: Il2CppVarType = 65535;
pub const Il2CppVarType_IL2CPP_VT_ILLEGALMASKED: Il2CppVarType = 4095;
pub const Il2CppVarType_IL2CPP_VT_TYPEMASK: Il2CppVarType = 4095;
pub type Il2CppVarType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppIUnknown {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppVariant {
    pub n1: Il2CppVariant__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppVariant__bindgen_ty_1 {
    pub n2: Il2CppVariant__bindgen_ty_1___tagVARIANT,
    pub decVal: Il2CppWin32Decimal,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppVariant__bindgen_ty_1___tagVARIANT {
    pub type_: u16,
    pub reserved1: u16,
    pub reserved2: u16,
    pub reserved3: u16,
    pub n3: Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1 {
    pub llVal: i64,
    pub lVal: i32,
    pub bVal: u8,
    pub iVal: i16,
    pub fltVal: f32,
    pub dblVal: f64,
    pub boolVal: IL2CPP_VARIANT_BOOL,
    pub scode: i32,
    pub cyVal: i64,
    pub date: f64,
    pub bstrVal: *mut Il2CppChar,
    pub punkVal: *mut Il2CppIUnknown,
    pub pdispVal: *mut ::std::os::raw::c_void,
    pub parray: *mut Il2CppSafeArray,
    pub pbVal: *mut u8,
    pub piVal: *mut i16,
    pub plVal: *mut i32,
    pub pllVal: *mut i64,
    pub pfltVal: *mut f32,
    pub pdblVal: *mut f64,
    pub pboolVal: *mut IL2CPP_VARIANT_BOOL,
    pub pscode: *mut i32,
    pub pcyVal: *mut i64,
    pub pdate: *mut f64,
    pub pbstrVal: *mut Il2CppChar,
    pub ppunkVal: *mut *mut Il2CppIUnknown,
    pub ppdispVal: *mut *mut ::std::os::raw::c_void,
    pub pparray: *mut *mut Il2CppSafeArray,
    pub pvarVal: *mut Il2CppVariant,
    pub byref: *mut ::std::os::raw::c_void,
    pub cVal: ::std::os::raw::c_char,
    pub uiVal: u16,
    pub ulVal: u32,
    pub ullVal: u64,
    pub intVal: ::std::os::raw::c_int,
    pub uintVal: ::std::os::raw::c_uint,
    pub pdecVal: *mut Il2CppWin32Decimal,
    pub pcVal: *mut ::std::os::raw::c_char,
    pub puiVal: *mut u16,
    pub pulVal: *mut u32,
    pub pullVal: *mut u64,
    pub pintVal: *mut ::std::os::raw::c_int,
    pub puintVal: *mut ::std::os::raw::c_uint,
    pub n4: Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD {
    pub pvRecord: *mut ::std::os::raw::c_void,
    pub pRecInfo: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD() {
    const UNINIT: ::std::mem::MaybeUninit<
        Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD>(
        ),
        16usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pvRecord) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD),
            "::",
            stringify!(pvRecord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRecInfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD),
            "::",
            stringify!(pRecInfo)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).llVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(llVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(lVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(bVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(iVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fltVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(fltVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dblVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(dblVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boolVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(boolVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(scode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cyVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(cyVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bstrVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(bstrVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).punkVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(punkVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdispVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pdispVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(parray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pbVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).piVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(piVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(plVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pllVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pllVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfltVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pfltVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdblVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pdblVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pboolVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pboolVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pscode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pscode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcyVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pcyVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbstrVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pbstrVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppunkVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(ppunkVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppdispVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(ppdispVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pparray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pparray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pvarVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pvarVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byref) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(byref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(cVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uiVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(uiVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(ulVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ullVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(ullVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(intVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uintVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(uintVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdecVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pdecVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pcVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).puiVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(puiVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pulVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pulVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pullVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pullVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pintVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pintVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).puintVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(puintVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(n4)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppVariant__bindgen_ty_1___tagVARIANT() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppVariant__bindgen_ty_1___tagVARIANT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT),
            "::",
            stringify!(n3)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppVariant__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppVariant__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppVariant__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppVariant__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppVariant__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppVariant__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1),
            "::",
            stringify!(n2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1),
            "::",
            stringify!(decVal)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppVariant() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppVariant> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppVariant>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppVariant))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppVariant>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppVariant))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant),
            "::",
            stringify!(n1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppFileTime {
    pub low: u32,
    pub high: u32,
}
#[test]
fn bindgen_test_layout_Il2CppFileTime() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppFileTime> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppFileTime>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppFileTime))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppFileTime>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppFileTime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFileTime),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFileTime),
            "::",
            stringify!(high)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppStatStg {
    pub name: *mut Il2CppChar,
    pub type_: u32,
    pub size: u64,
    pub mtime: Il2CppFileTime,
    pub ctime: Il2CppFileTime,
    pub atime: Il2CppFileTime,
    pub mode: u32,
    pub locks: u32,
    pub clsid: Il2CppGuid,
    pub state: u32,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_Il2CppStatStg() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppStatStg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppStatStg>(),
        80usize,
        concat!("Size of: ", stringify!(Il2CppStatStg))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStatStg>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppStatStg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locks) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(locks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clsid) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(clsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(reserved)
        )
    );
}
pub const Il2CppWindowsRuntimeTypeKind_kTypeKindPrimitive: Il2CppWindowsRuntimeTypeKind = 0;
pub const Il2CppWindowsRuntimeTypeKind_kTypeKindMetadata: Il2CppWindowsRuntimeTypeKind = 1;
pub const Il2CppWindowsRuntimeTypeKind_kTypeKindCustom: Il2CppWindowsRuntimeTypeKind = 2;
pub type Il2CppWindowsRuntimeTypeKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWindowsRuntimeTypeName {
    pub typeName: Il2CppHString,
    pub typeKind: Il2CppWindowsRuntimeTypeKind,
}
#[test]
fn bindgen_test_layout_Il2CppWindowsRuntimeTypeName() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppWindowsRuntimeTypeName> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppWindowsRuntimeTypeName>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppWindowsRuntimeTypeName))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWindowsRuntimeTypeName>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppWindowsRuntimeTypeName))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWindowsRuntimeTypeName),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeKind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWindowsRuntimeTypeName),
            "::",
            stringify!(typeKind)
        )
    );
}
pub type PInvokeMarshalToNativeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        managedStructure: *mut ::std::os::raw::c_void,
        marshaledStructure: *mut ::std::os::raw::c_void,
    ),
>;
pub type PInvokeMarshalFromNativeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        marshaledStructure: *mut ::std::os::raw::c_void,
        managedStructure: *mut ::std::os::raw::c_void,
    ),
>;
pub type PInvokeMarshalCleanupFunc =
    ::std::option::Option<unsafe extern "C" fn(marshaledStructure: *mut ::std::os::raw::c_void)>;
pub type CreateCCWFunc =
    ::std::option::Option<unsafe extern "C" fn(obj: *mut Il2CppObject) -> *mut Il2CppIUnknown>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppInteropData {
    pub delegatePInvokeWrapperFunction: Il2CppMethodPointer,
    pub pinvokeMarshalToNativeFunction: PInvokeMarshalToNativeFunc,
    pub pinvokeMarshalFromNativeFunction: PInvokeMarshalFromNativeFunc,
    pub pinvokeMarshalCleanupFunction: PInvokeMarshalCleanupFunc,
    pub createCCWFunction: CreateCCWFunc,
    pub guid: *const Il2CppGuid,
    pub type_: *const Il2CppType,
}
#[test]
fn bindgen_test_layout_Il2CppInteropData() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppInteropData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppInteropData>(),
        56usize,
        concat!("Size of: ", stringify!(Il2CppInteropData))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppInteropData>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppInteropData))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).delegatePInvokeWrapperFunction) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(delegatePInvokeWrapperFunction)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pinvokeMarshalToNativeFunction) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(pinvokeMarshalToNativeFunction)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pinvokeMarshalFromNativeFunction) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(pinvokeMarshalFromNativeFunction)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pinvokeMarshalCleanupFunction) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(pinvokeMarshalCleanupFunction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createCCWFunction) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(createCCWFunction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppNameToTypeHandleHashTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VirtualInvokeData {
    pub methodPtr: Il2CppMethodPointer,
    pub method: *const MethodInfo,
}
#[test]
fn bindgen_test_layout_VirtualInvokeData() {
    const UNINIT: ::std::mem::MaybeUninit<VirtualInvokeData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VirtualInvokeData>(),
        16usize,
        concat!("Size of: ", stringify!(VirtualInvokeData))
    );
    assert_eq!(
        ::std::mem::align_of::<VirtualInvokeData>(),
        8usize,
        concat!("Alignment of ", stringify!(VirtualInvokeData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VirtualInvokeData),
            "::",
            stringify!(methodPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VirtualInvokeData),
            "::",
            stringify!(method)
        )
    );
}
pub const Il2CppTypeNameFormat_IL2CPP_TYPE_NAME_FORMAT_IL: Il2CppTypeNameFormat = 0;
pub const Il2CppTypeNameFormat_IL2CPP_TYPE_NAME_FORMAT_REFLECTION: Il2CppTypeNameFormat = 1;
pub const Il2CppTypeNameFormat_IL2CPP_TYPE_NAME_FORMAT_FULL_NAME: Il2CppTypeNameFormat = 2;
pub const Il2CppTypeNameFormat_IL2CPP_TYPE_NAME_FORMAT_ASSEMBLY_QUALIFIED: Il2CppTypeNameFormat = 3;
pub type Il2CppTypeNameFormat = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDefaults {
    pub corlib: *mut Il2CppImage,
    pub object_class: *mut Il2CppClass,
    pub byte_class: *mut Il2CppClass,
    pub void_class: *mut Il2CppClass,
    pub boolean_class: *mut Il2CppClass,
    pub sbyte_class: *mut Il2CppClass,
    pub int16_class: *mut Il2CppClass,
    pub uint16_class: *mut Il2CppClass,
    pub int32_class: *mut Il2CppClass,
    pub uint32_class: *mut Il2CppClass,
    pub int_class: *mut Il2CppClass,
    pub uint_class: *mut Il2CppClass,
    pub int64_class: *mut Il2CppClass,
    pub uint64_class: *mut Il2CppClass,
    pub single_class: *mut Il2CppClass,
    pub double_class: *mut Il2CppClass,
    pub char_class: *mut Il2CppClass,
    pub string_class: *mut Il2CppClass,
    pub enum_class: *mut Il2CppClass,
    pub array_class: *mut Il2CppClass,
    pub delegate_class: *mut Il2CppClass,
    pub multicastdelegate_class: *mut Il2CppClass,
    pub asyncresult_class: *mut Il2CppClass,
    pub manualresetevent_class: *mut Il2CppClass,
    pub typehandle_class: *mut Il2CppClass,
    pub fieldhandle_class: *mut Il2CppClass,
    pub methodhandle_class: *mut Il2CppClass,
    pub systemtype_class: *mut Il2CppClass,
    pub monotype_class: *mut Il2CppClass,
    pub exception_class: *mut Il2CppClass,
    pub threadabortexception_class: *mut Il2CppClass,
    pub thread_class: *mut Il2CppClass,
    pub internal_thread_class: *mut Il2CppClass,
    pub appdomain_class: *mut Il2CppClass,
    pub appdomain_setup_class: *mut Il2CppClass,
    pub field_info_class: *mut Il2CppClass,
    pub method_info_class: *mut Il2CppClass,
    pub property_info_class: *mut Il2CppClass,
    pub event_info_class: *mut Il2CppClass,
    pub mono_event_info_class: *mut Il2CppClass,
    pub stringbuilder_class: *mut Il2CppClass,
    pub stack_frame_class: *mut Il2CppClass,
    pub stack_trace_class: *mut Il2CppClass,
    pub marshal_class: *mut Il2CppClass,
    pub typed_reference_class: *mut Il2CppClass,
    pub marshalbyrefobject_class: *mut Il2CppClass,
    pub generic_ilist_class: *mut Il2CppClass,
    pub generic_icollection_class: *mut Il2CppClass,
    pub generic_ienumerable_class: *mut Il2CppClass,
    pub generic_ireadonlylist_class: *mut Il2CppClass,
    pub generic_ireadonlycollection_class: *mut Il2CppClass,
    pub runtimetype_class: *mut Il2CppClass,
    pub generic_nullable_class: *mut Il2CppClass,
    pub il2cpp_com_object_class: *mut Il2CppClass,
    pub attribute_class: *mut Il2CppClass,
    pub customattribute_data_class: *mut Il2CppClass,
    pub version: *mut Il2CppClass,
    pub culture_info: *mut Il2CppClass,
    pub async_call_class: *mut Il2CppClass,
    pub assembly_class: *mut Il2CppClass,
    pub mono_assembly_class: *mut Il2CppClass,
    pub assembly_name_class: *mut Il2CppClass,
    pub mono_field_class: *mut Il2CppClass,
    pub mono_method_class: *mut Il2CppClass,
    pub mono_method_info_class: *mut Il2CppClass,
    pub mono_property_info_class: *mut Il2CppClass,
    pub parameter_info_class: *mut Il2CppClass,
    pub mono_parameter_info_class: *mut Il2CppClass,
    pub module_class: *mut Il2CppClass,
    pub pointer_class: *mut Il2CppClass,
    pub system_exception_class: *mut Il2CppClass,
    pub argument_exception_class: *mut Il2CppClass,
    pub wait_handle_class: *mut Il2CppClass,
    pub safe_handle_class: *mut Il2CppClass,
    pub sort_key_class: *mut Il2CppClass,
    pub dbnull_class: *mut Il2CppClass,
    pub error_wrapper_class: *mut Il2CppClass,
    pub missing_class: *mut Il2CppClass,
    pub value_type_class: *mut Il2CppClass,
    pub threadpool_wait_callback_class: *mut Il2CppClass,
    pub threadpool_perform_wait_callback_method: *mut MethodInfo,
    pub mono_method_message_class: *mut Il2CppClass,
    pub ireference_class: *mut Il2CppClass,
    pub ireferencearray_class: *mut Il2CppClass,
    pub ikey_value_pair_class: *mut Il2CppClass,
    pub key_value_pair_class: *mut Il2CppClass,
    pub windows_foundation_uri_class: *mut Il2CppClass,
    pub windows_foundation_iuri_runtime_class_class: *mut Il2CppClass,
    pub system_uri_class: *mut Il2CppClass,
    pub system_guid_class: *mut Il2CppClass,
    pub sbyte_shared_enum: *mut Il2CppClass,
    pub int16_shared_enum: *mut Il2CppClass,
    pub int32_shared_enum: *mut Il2CppClass,
    pub int64_shared_enum: *mut Il2CppClass,
    pub byte_shared_enum: *mut Il2CppClass,
    pub uint16_shared_enum: *mut Il2CppClass,
    pub uint32_shared_enum: *mut Il2CppClass,
    pub uint64_shared_enum: *mut Il2CppClass,
}
#[test]
fn bindgen_test_layout_Il2CppDefaults() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDefaults> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDefaults>(),
        784usize,
        concat!("Size of: ", stringify!(Il2CppDefaults))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDefaults>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDefaults))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corlib) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(corlib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_class) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(object_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_class) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(byte_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).void_class) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(void_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boolean_class) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(boolean_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbyte_class) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(sbyte_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int16_class) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int16_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint16_class) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint16_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32_class) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int32_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint32_class) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint32_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_class) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint_class) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int64_class) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int64_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint64_class) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint64_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).single_class) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(single_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).double_class) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(double_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_class) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(char_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_class) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(string_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enum_class) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(enum_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_class) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(array_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delegate_class) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(delegate_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multicastdelegate_class) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(multicastdelegate_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asyncresult_class) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(asyncresult_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manualresetevent_class) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(manualresetevent_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typehandle_class) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(typehandle_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldhandle_class) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(fieldhandle_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodhandle_class) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(methodhandle_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).systemtype_class) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(systemtype_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).monotype_class) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(monotype_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception_class) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(exception_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadabortexception_class) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(threadabortexception_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_class) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(thread_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_thread_class) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(internal_thread_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appdomain_class) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(appdomain_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appdomain_setup_class) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(appdomain_setup_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_info_class) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(field_info_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_info_class) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(method_info_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_info_class) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(property_info_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_info_class) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(event_info_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mono_event_info_class) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_event_info_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringbuilder_class) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(stringbuilder_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_frame_class) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(stack_frame_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_trace_class) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(stack_trace_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marshal_class) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(marshal_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typed_reference_class) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(typed_reference_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marshalbyrefobject_class) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(marshalbyrefobject_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic_ilist_class) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_ilist_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic_icollection_class) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_icollection_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic_ienumerable_class) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_ienumerable_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic_ireadonlylist_class) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_ireadonlylist_class)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).generic_ireadonlycollection_class) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_ireadonlycollection_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runtimetype_class) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(runtimetype_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic_nullable_class) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_nullable_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).il2cpp_com_object_class) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(il2cpp_com_object_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attribute_class) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(attribute_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customattribute_data_class) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(customattribute_data_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).culture_info) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(culture_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_call_class) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(async_call_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assembly_class) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(assembly_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mono_assembly_class) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_assembly_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assembly_name_class) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(assembly_name_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mono_field_class) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_field_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mono_method_class) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_method_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mono_method_info_class) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_method_info_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mono_property_info_class) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_property_info_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_info_class) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(parameter_info_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mono_parameter_info_class) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_parameter_info_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_class) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(module_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointer_class) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(pointer_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_exception_class) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(system_exception_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argument_exception_class) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(argument_exception_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_handle_class) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(wait_handle_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).safe_handle_class) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(safe_handle_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sort_key_class) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(sort_key_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbnull_class) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(dbnull_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_wrapper_class) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(error_wrapper_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).missing_class) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(missing_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_type_class) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(value_type_class)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).threadpool_wait_callback_class) as usize - ptr as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(threadpool_wait_callback_class)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).threadpool_perform_wait_callback_method) as usize
                - ptr as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(threadpool_perform_wait_callback_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mono_method_message_class) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_method_message_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ireference_class) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(ireference_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ireferencearray_class) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(ireferencearray_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ikey_value_pair_class) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(ikey_value_pair_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_value_pair_class) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(key_value_pair_class)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).windows_foundation_uri_class) as usize - ptr as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(windows_foundation_uri_class)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).windows_foundation_iuri_runtime_class_class) as usize
                - ptr as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(windows_foundation_iuri_runtime_class_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_uri_class) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(system_uri_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_guid_class) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(system_guid_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbyte_shared_enum) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(sbyte_shared_enum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int16_shared_enum) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int16_shared_enum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32_shared_enum) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int32_shared_enum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int64_shared_enum) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int64_shared_enum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_shared_enum) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(byte_shared_enum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint16_shared_enum) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint16_shared_enum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint32_shared_enum) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint32_shared_enum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint64_shared_enum) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint64_shared_enum)
        )
    );
}
extern "C" {
    pub static mut il2cpp_defaults: Il2CppDefaults;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemberInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CustomAttributesCache {
    pub count: ::std::os::raw::c_int,
    pub attributes: *mut *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_CustomAttributesCache() {
    const UNINIT: ::std::mem::MaybeUninit<CustomAttributesCache> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CustomAttributesCache>(),
        16usize,
        concat!("Size of: ", stringify!(CustomAttributesCache))
    );
    assert_eq!(
        ::std::mem::align_of::<CustomAttributesCache>(),
        8usize,
        concat!("Alignment of ", stringify!(CustomAttributesCache))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomAttributesCache),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomAttributesCache),
            "::",
            stringify!(attributes)
        )
    );
}
pub type CustomAttributesCacheGenerator =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut CustomAttributesCache)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FieldInfo {
    pub name: *const ::std::os::raw::c_char,
    pub type_: *const Il2CppType,
    pub parent: *mut Il2CppClass,
    pub offset: i32,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_FieldInfo() {
    const UNINIT: ::std::mem::MaybeUninit<FieldInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FieldInfo>(),
        32usize,
        concat!("Size of: ", stringify!(FieldInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<FieldInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(FieldInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropertyInfo {
    pub parent: *mut Il2CppClass,
    pub name: *const ::std::os::raw::c_char,
    pub get: *const MethodInfo,
    pub set: *const MethodInfo,
    pub attrs: u32,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_PropertyInfo() {
    const UNINIT: ::std::mem::MaybeUninit<PropertyInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PropertyInfo>(),
        40usize,
        concat!("Size of: ", stringify!(PropertyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PropertyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PropertyInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventInfo {
    pub name: *const ::std::os::raw::c_char,
    pub eventType: *const Il2CppType,
    pub parent: *mut Il2CppClass,
    pub add: *const MethodInfo,
    pub remove: *const MethodInfo,
    pub raise: *const MethodInfo,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_EventInfo() {
    const UNINIT: ::std::mem::MaybeUninit<EventInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<EventInfo>(),
        56usize,
        concat!("Size of: ", stringify!(EventInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<EventInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(EventInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(eventType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remove) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raise) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(raise)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParameterInfo {
    pub name: *const ::std::os::raw::c_char,
    pub position: i32,
    pub token: u32,
    pub parameter_type: *const Il2CppType,
}
#[test]
fn bindgen_test_layout_ParameterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ParameterInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ParameterInfo>(),
        24usize,
        concat!("Size of: ", stringify!(ParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ParameterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterInfo),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterInfo),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterInfo),
            "::",
            stringify!(parameter_type)
        )
    );
}
pub type InvokerMethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: Il2CppMethodPointer,
        arg2: *const MethodInfo,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub const MethodVariableKind_kMethodVariableKind_This: MethodVariableKind = 0;
pub const MethodVariableKind_kMethodVariableKind_Parameter: MethodVariableKind = 1;
pub const MethodVariableKind_kMethodVariableKind_LocalVariable: MethodVariableKind = 2;
pub type MethodVariableKind = ::std::os::raw::c_int;
pub const SequencePointKind_kSequencePointKind_Normal: SequencePointKind = 0;
pub const SequencePointKind_kSequencePointKind_StepOut: SequencePointKind = 1;
pub type SequencePointKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodExecutionContextInfo {
    pub typeIndex: TypeIndex,
    pub nameIndex: i32,
    pub scopeIndex: i32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodExecutionContextInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMethodExecutionContextInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodExecutionContextInfo>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppMethodExecutionContextInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodExecutionContextInfo>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppMethodExecutionContextInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfo),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfo),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scopeIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfo),
            "::",
            stringify!(scopeIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodExecutionContextInfoIndex {
    pub startIndex: i32,
    pub count: i32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodExecutionContextInfoIndex() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMethodExecutionContextInfoIndex> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodExecutionContextInfoIndex>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppMethodExecutionContextInfoIndex)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodExecutionContextInfoIndex>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppMethodExecutionContextInfoIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfoIndex),
            "::",
            stringify!(startIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfoIndex),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodScope {
    pub startOffset: i32,
    pub endOffset: i32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodScope() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMethodScope> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodScope>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppMethodScope))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodScope>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMethodScope))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startOffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodScope),
            "::",
            stringify!(startOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endOffset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodScope),
            "::",
            stringify!(endOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodHeaderInfo {
    pub code_size: i32,
    pub startScope: i32,
    pub numScopes: i32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodHeaderInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMethodHeaderInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodHeaderInfo>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppMethodHeaderInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodHeaderInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMethodHeaderInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodHeaderInfo),
            "::",
            stringify!(code_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startScope) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodHeaderInfo),
            "::",
            stringify!(startScope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numScopes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodHeaderInfo),
            "::",
            stringify!(numScopes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSequencePointSourceFile {
    pub file: *const ::std::os::raw::c_char,
    pub hash: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_Il2CppSequencePointSourceFile() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppSequencePointSourceFile> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppSequencePointSourceFile>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppSequencePointSourceFile))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSequencePointSourceFile>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSequencePointSourceFile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePointSourceFile),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePointSourceFile),
            "::",
            stringify!(hash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTypeSourceFilePair {
    pub __klassIndex: TypeDefinitionIndex,
    pub sourceFileIndex: i32,
}
#[test]
fn bindgen_test_layout_Il2CppTypeSourceFilePair() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppTypeSourceFilePair> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppTypeSourceFilePair>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppTypeSourceFilePair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTypeSourceFilePair>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppTypeSourceFilePair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__klassIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeSourceFilePair),
            "::",
            stringify!(__klassIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceFileIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeSourceFilePair),
            "::",
            stringify!(sourceFileIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSequencePoint {
    pub __methodDefinitionIndex: MethodIndex,
    pub sourceFileIndex: i32,
    pub lineStart: i32,
    pub lineEnd: i32,
    pub columnStart: i32,
    pub columnEnd: i32,
    pub ilOffset: i32,
    pub kind: SequencePointKind,
    pub isActive: i32,
    pub id: i32,
}
#[test]
fn bindgen_test_layout_Il2CppSequencePoint() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppSequencePoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppSequencePoint>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppSequencePoint))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSequencePoint>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppSequencePoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__methodDefinitionIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(__methodDefinitionIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceFileIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(sourceFileIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineStart) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(lineStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineEnd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(lineEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).columnStart) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(columnStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).columnEnd) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(columnEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ilOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(ilOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isActive) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(isActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppCatchPoint {
    pub __methodDefinitionIndex: MethodIndex,
    pub catchTypeIndex: TypeIndex,
    pub ilOffset: i32,
    pub tryId: i32,
    pub parentTryId: i32,
}
#[test]
fn bindgen_test_layout_Il2CppCatchPoint() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppCatchPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppCatchPoint>(),
        20usize,
        concat!("Size of: ", stringify!(Il2CppCatchPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCatchPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppCatchPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__methodDefinitionIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCatchPoint),
            "::",
            stringify!(__methodDefinitionIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).catchTypeIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCatchPoint),
            "::",
            stringify!(catchTypeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ilOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCatchPoint),
            "::",
            stringify!(ilOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tryId) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCatchPoint),
            "::",
            stringify!(tryId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentTryId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCatchPoint),
            "::",
            stringify!(parentTryId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDebuggerMetadataRegistration {
    pub methodExecutionContextInfos: *mut Il2CppMethodExecutionContextInfo,
    pub methodExecutionContextInfoIndexes: *mut Il2CppMethodExecutionContextInfoIndex,
    pub methodScopes: *mut Il2CppMethodScope,
    pub methodHeaderInfos: *mut Il2CppMethodHeaderInfo,
    pub sequencePointSourceFiles: *mut Il2CppSequencePointSourceFile,
    pub numSequencePoints: i32,
    pub sequencePoints: *mut Il2CppSequencePoint,
    pub numCatchPoints: i32,
    pub catchPoints: *mut Il2CppCatchPoint,
    pub numTypeSourceFileEntries: i32,
    pub typeSourceFiles: *mut Il2CppTypeSourceFilePair,
    pub methodExecutionContextInfoStrings: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Il2CppDebuggerMetadataRegistration() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDebuggerMetadataRegistration> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDebuggerMetadataRegistration>(),
        96usize,
        concat!("Size of: ", stringify!(Il2CppDebuggerMetadataRegistration))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDebuggerMetadataRegistration>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppDebuggerMetadataRegistration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodExecutionContextInfos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(methodExecutionContextInfos)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).methodExecutionContextInfoIndexes) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(methodExecutionContextInfoIndexes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodScopes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(methodScopes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodHeaderInfos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(methodHeaderInfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequencePointSourceFiles) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(sequencePointSourceFiles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSequencePoints) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(numSequencePoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequencePoints) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(sequencePoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numCatchPoints) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(numCatchPoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).catchPoints) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(catchPoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numTypeSourceFileEntries) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(numTypeSourceFileEntries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeSourceFiles) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(typeSourceFiles)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).methodExecutionContextInfoStrings) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(methodExecutionContextInfoStrings)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppRGCTXData {
    pub rgctxDataDummy: *mut ::std::os::raw::c_void,
    pub method: *const MethodInfo,
    pub type_: *const Il2CppType,
    pub klass: *mut Il2CppClass,
}
#[test]
fn bindgen_test_layout_Il2CppRGCTXData() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppRGCTXData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppRGCTXData>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppRGCTXData))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRGCTXData>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppRGCTXData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgctxDataDummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXData),
            "::",
            stringify!(rgctxDataDummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXData),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXData),
            "::",
            stringify!(klass)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MethodInfo {
    pub methodPointer: Il2CppMethodPointer,
    pub invoker_method: InvokerMethod,
    pub name: *const ::std::os::raw::c_char,
    pub klass: *mut Il2CppClass,
    pub return_type: *const Il2CppType,
    pub parameters: *const ParameterInfo,
    pub Il2CppVariant: MethodInfo__bindgen_ty_1,
    pub __bindgen_anon_1: MethodInfo__bindgen_ty_2,
    pub token: u32,
    pub flags: u16,
    pub iflags: u16,
    pub slot: u16,
    pub parameters_count: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MethodInfo__bindgen_ty_1 {
    pub rgctx_data: *const Il2CppRGCTXData,
    pub methodMetadataHandle: Il2CppMetadataMethodDefinitionHandle,
}
#[test]
fn bindgen_test_layout_MethodInfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MethodInfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MethodInfo__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(MethodInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MethodInfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(MethodInfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgctx_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo__bindgen_ty_1),
            "::",
            stringify!(rgctx_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodMetadataHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo__bindgen_ty_1),
            "::",
            stringify!(methodMetadataHandle)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MethodInfo__bindgen_ty_2 {
    pub genericMethod: *const Il2CppGenericMethod,
    pub genericContainerHandle: Il2CppMetadataGenericContainerHandle,
}
#[test]
fn bindgen_test_layout_MethodInfo__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<MethodInfo__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MethodInfo__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(MethodInfo__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<MethodInfo__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(MethodInfo__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericMethod) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo__bindgen_ty_2),
            "::",
            stringify!(genericMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericContainerHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo__bindgen_ty_2),
            "::",
            stringify!(genericContainerHandle)
        )
    );
}
#[test]
fn bindgen_test_layout_MethodInfo() {
    const UNINIT: ::std::mem::MaybeUninit<MethodInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MethodInfo>(),
        80usize,
        concat!("Size of: ", stringify!(MethodInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<MethodInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(MethodInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodPointer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(methodPointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invoker_method) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(invoker_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(return_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameters) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Il2CppVariant) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(Il2CppVariant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iflags) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(iflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameters_count) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(parameters_count)
        )
    );
}
impl MethodInfo {
    #[inline]
    pub fn is_generic(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_generic(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_inflated(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_inflated(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wrapper_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wrapper_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_marshaled_from_native(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_marshaled_from_native(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_generic: u8,
        is_inflated: u8,
        wrapper_type: u8,
        is_marshaled_from_native: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_generic: u8 = unsafe { ::std::mem::transmute(is_generic) };
            is_generic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_inflated: u8 = unsafe { ::std::mem::transmute(is_inflated) };
            is_inflated as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let wrapper_type: u8 = unsafe { ::std::mem::transmute(wrapper_type) };
            wrapper_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_marshaled_from_native: u8 =
                unsafe { ::std::mem::transmute(is_marshaled_from_native) };
            is_marshaled_from_native as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppRuntimeInterfaceOffsetPair {
    pub interfaceType: *mut Il2CppClass,
    pub offset: i32,
}
#[test]
fn bindgen_test_layout_Il2CppRuntimeInterfaceOffsetPair() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppRuntimeInterfaceOffsetPair> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppRuntimeInterfaceOffsetPair>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppRuntimeInterfaceOffsetPair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRuntimeInterfaceOffsetPair>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppRuntimeInterfaceOffsetPair)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaceType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeInterfaceOffsetPair),
            "::",
            stringify!(interfaceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeInterfaceOffsetPair),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppClass {
    pub image: *const Il2CppImage,
    pub gc_desc: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_char,
    pub namespaze: *const ::std::os::raw::c_char,
    pub byval_arg: Il2CppType,
    pub this_arg: Il2CppType,
    pub element_class: *mut Il2CppClass,
    pub castClass: *mut Il2CppClass,
    pub declaringType: *mut Il2CppClass,
    pub parent: *mut Il2CppClass,
    pub generic_class: *mut Il2CppGenericClass,
    pub typeMetadataHandle: Il2CppMetadataTypeHandle,
    pub interopData: *const Il2CppInteropData,
    pub klass: *mut Il2CppClass,
    pub fields: *mut FieldInfo,
    pub events: *const EventInfo,
    pub properties: *const PropertyInfo,
    pub methods: *mut *const MethodInfo,
    pub nestedTypes: *mut *mut Il2CppClass,
    pub implementedInterfaces: *mut *mut Il2CppClass,
    pub interfaceOffsets: *mut Il2CppRuntimeInterfaceOffsetPair,
    pub static_fields: *mut ::std::os::raw::c_void,
    pub rgctx_data: *const Il2CppRGCTXData,
    pub typeHierarchy: *mut *mut Il2CppClass,
    pub unity_user_data: *mut ::std::os::raw::c_void,
    pub initializationExceptionGCHandle: u32,
    pub cctor_started: u32,
    pub cctor_finished: u32,
    pub cctor_thread: usize,
    pub genericContainerHandle: Il2CppMetadataGenericContainerHandle,
    pub instance_size: u32,
    pub actualSize: u32,
    pub element_size: u32,
    pub native_size: i32,
    pub static_fields_size: u32,
    pub thread_static_fields_size: u32,
    pub thread_static_fields_offset: i32,
    pub flags: u32,
    pub token: u32,
    pub method_count: u16,
    pub property_count: u16,
    pub field_count: u16,
    pub event_count: u16,
    pub nested_type_count: u16,
    pub vtable_count: u16,
    pub interfaces_count: u16,
    pub interface_offsets_count: u16,
    pub typeHierarchyDepth: u8,
    pub genericRecursionDepth: u8,
    pub rank: u8,
    pub minimumAlignment: u8,
    pub naturalAligment: u8,
    pub packingSize: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub vtable: [VirtualInvokeData; 32usize],
}
#[test]
fn bindgen_test_layout_Il2CppClass() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppClass>(),
        824usize,
        concat!("Size of: ", stringify!(Il2CppClass))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppClass>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(gc_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namespaze) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(namespaze)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byval_arg) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(byval_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).this_arg) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(this_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element_class) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(element_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).castClass) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(castClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).declaringType) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(declaringType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic_class) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(generic_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeMetadataHandle) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(typeMetadataHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interopData) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(interopData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methods) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(methods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nestedTypes) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(nestedTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementedInterfaces) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(implementedInterfaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaceOffsets) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(interfaceOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_fields) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(static_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgctx_data) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(rgctx_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeHierarchy) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(typeHierarchy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unity_user_data) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(unity_user_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).initializationExceptionGCHandle) as usize - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(initializationExceptionGCHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cctor_started) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(cctor_started)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cctor_finished) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(cctor_finished)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cctor_thread) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(cctor_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericContainerHandle) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(genericContainerHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance_size) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(instance_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actualSize) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(actualSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element_size) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).native_size) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(native_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_fields_size) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(static_fields_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_static_fields_size) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(thread_static_fields_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_static_fields_offset) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(thread_static_fields_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_count) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(method_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_count) as usize - ptr as usize },
        286usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(property_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_count) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(field_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_count) as usize - ptr as usize },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(event_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nested_type_count) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(nested_type_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable_count) as usize - ptr as usize },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(vtable_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaces_count) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(interfaces_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_offsets_count) as usize - ptr as usize },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(interface_offsets_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeHierarchyDepth) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(typeHierarchyDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericRecursionDepth) as usize - ptr as usize },
        301usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(genericRecursionDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rank) as usize - ptr as usize },
        302usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimumAlignment) as usize - ptr as usize },
        303usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(minimumAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naturalAligment) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(naturalAligment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packingSize) as usize - ptr as usize },
        305usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(packingSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(vtable)
        )
    );
}
impl Il2CppClass {
    #[inline]
    pub fn initialized_and_no_error(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_initialized_and_no_error(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn valuetype(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_valuetype(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn initialized(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_initialized(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enumtype(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_enumtype(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_generic(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_generic(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_references(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_references(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn init_pending(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_init_pending(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn size_inited(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_size_inited(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_finalize(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_finalize(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_cctor(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_cctor(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_blittable(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_blittable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_import_or_windows_runtime(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_import_or_windows_runtime(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_vtable_initialized(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_vtable_initialized(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_initialization_error(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_initialization_error(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        initialized_and_no_error: u8,
        valuetype: u8,
        initialized: u8,
        enumtype: u8,
        is_generic: u8,
        has_references: u8,
        init_pending: u8,
        size_inited: u8,
        has_finalize: u8,
        has_cctor: u8,
        is_blittable: u8,
        is_import_or_windows_runtime: u8,
        is_vtable_initialized: u8,
        has_initialization_error: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let initialized_and_no_error: u8 =
                unsafe { ::std::mem::transmute(initialized_and_no_error) };
            initialized_and_no_error as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let valuetype: u8 = unsafe { ::std::mem::transmute(valuetype) };
            valuetype as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let initialized: u8 = unsafe { ::std::mem::transmute(initialized) };
            initialized as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let enumtype: u8 = unsafe { ::std::mem::transmute(enumtype) };
            enumtype as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_generic: u8 = unsafe { ::std::mem::transmute(is_generic) };
            is_generic as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let has_references: u8 = unsafe { ::std::mem::transmute(has_references) };
            has_references as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let init_pending: u8 = unsafe { ::std::mem::transmute(init_pending) };
            init_pending as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let size_inited: u8 = unsafe { ::std::mem::transmute(size_inited) };
            size_inited as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let has_finalize: u8 = unsafe { ::std::mem::transmute(has_finalize) };
            has_finalize as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let has_cctor: u8 = unsafe { ::std::mem::transmute(has_cctor) };
            has_cctor as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let is_blittable: u8 = unsafe { ::std::mem::transmute(is_blittable) };
            is_blittable as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let is_import_or_windows_runtime: u8 =
                unsafe { ::std::mem::transmute(is_import_or_windows_runtime) };
            is_import_or_windows_runtime as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let is_vtable_initialized: u8 = unsafe { ::std::mem::transmute(is_vtable_initialized) };
            is_vtable_initialized as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let has_initialization_error: u8 =
                unsafe { ::std::mem::transmute(has_initialization_error) };
            has_initialization_error as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppClass_0 {
    pub image: *const Il2CppImage,
    pub gc_desc: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_char,
    pub namespaze: *const ::std::os::raw::c_char,
    pub byval_arg: Il2CppType,
    pub this_arg: Il2CppType,
    pub element_class: *mut Il2CppClass,
    pub castClass: *mut Il2CppClass,
    pub declaringType: *mut Il2CppClass,
    pub parent: *mut Il2CppClass,
    pub generic_class: *mut Il2CppGenericClass,
    pub typeMetadataHandle: Il2CppMetadataTypeHandle,
    pub interopData: *const Il2CppInteropData,
    pub klass: *mut Il2CppClass,
    pub fields: *mut FieldInfo,
    pub events: *const EventInfo,
    pub properties: *const PropertyInfo,
    pub methods: *mut *const MethodInfo,
    pub nestedTypes: *mut *mut Il2CppClass,
    pub implementedInterfaces: *mut *mut Il2CppClass,
}
#[test]
fn bindgen_test_layout_Il2CppClass_0() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppClass_0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppClass_0>(),
        176usize,
        concat!("Size of: ", stringify!(Il2CppClass_0))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppClass_0>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppClass_0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(gc_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namespaze) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(namespaze)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byval_arg) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(byval_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).this_arg) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(this_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element_class) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(element_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).castClass) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(castClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).declaringType) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(declaringType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic_class) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(generic_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeMetadataHandle) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(typeMetadataHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interopData) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(interopData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methods) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(methods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nestedTypes) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(nestedTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementedInterfaces) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_0),
            "::",
            stringify!(implementedInterfaces)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppClass_1 {
    pub typeHierarchy: *mut *mut Il2CppClass,
    pub unity_user_data: *mut ::std::os::raw::c_void,
    pub initializationExceptionGCHandle: u32,
    pub cctor_started: u32,
    pub cctor_finished: u32,
    pub cctor_thread: usize,
    pub genericContainerHandle: Il2CppMetadataGenericContainerHandle,
    pub instance_size: u32,
    pub actualSize: u32,
    pub element_size: u32,
    pub native_size: i32,
    pub static_fields_size: u32,
    pub thread_static_fields_size: u32,
    pub thread_static_fields_offset: i32,
    pub flags: u32,
    pub token: u32,
    pub method_count: u16,
    pub property_count: u16,
    pub field_count: u16,
    pub event_count: u16,
    pub nested_type_count: u16,
    pub vtable_count: u16,
    pub interfaces_count: u16,
    pub interface_offsets_count: u16,
    pub typeHierarchyDepth: u8,
    pub genericRecursionDepth: u8,
    pub rank: u8,
    pub minimumAlignment: u8,
    pub naturalAligment: u8,
    pub packingSize: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout_Il2CppClass_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppClass_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppClass_1>(),
        112usize,
        concat!("Size of: ", stringify!(Il2CppClass_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppClass_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppClass_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeHierarchy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(typeHierarchy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unity_user_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(unity_user_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).initializationExceptionGCHandle) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(initializationExceptionGCHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cctor_started) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(cctor_started)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cctor_finished) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(cctor_finished)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cctor_thread) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(cctor_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericContainerHandle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(genericContainerHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(instance_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actualSize) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(actualSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).native_size) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(native_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_fields_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(static_fields_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_static_fields_size) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(thread_static_fields_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_static_fields_offset) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(thread_static_fields_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_count) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(method_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_count) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(property_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_count) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(field_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_count) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(event_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nested_type_count) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(nested_type_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable_count) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(vtable_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaces_count) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(interfaces_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_offsets_count) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(interface_offsets_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeHierarchyDepth) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(typeHierarchyDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericRecursionDepth) as usize - ptr as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(genericRecursionDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rank) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimumAlignment) as usize - ptr as usize },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(minimumAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naturalAligment) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(naturalAligment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packingSize) as usize - ptr as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_1),
            "::",
            stringify!(packingSize)
        )
    );
}
impl Il2CppClass_1 {
    #[inline]
    pub fn initialized_and_no_error(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_initialized_and_no_error(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn valuetype(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_valuetype(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn initialized(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_initialized(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enumtype(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_enumtype(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_generic(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_generic(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_references(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_references(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn init_pending(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_init_pending(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn size_inited(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_size_inited(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_finalize(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_finalize(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_cctor(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_cctor(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_blittable(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_blittable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_import_or_windows_runtime(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_import_or_windows_runtime(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_vtable_initialized(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_vtable_initialized(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_initialization_error(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_initialization_error(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        initialized_and_no_error: u8,
        valuetype: u8,
        initialized: u8,
        enumtype: u8,
        is_generic: u8,
        has_references: u8,
        init_pending: u8,
        size_inited: u8,
        has_finalize: u8,
        has_cctor: u8,
        is_blittable: u8,
        is_import_or_windows_runtime: u8,
        is_vtable_initialized: u8,
        has_initialization_error: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let initialized_and_no_error: u8 =
                unsafe { ::std::mem::transmute(initialized_and_no_error) };
            initialized_and_no_error as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let valuetype: u8 = unsafe { ::std::mem::transmute(valuetype) };
            valuetype as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let initialized: u8 = unsafe { ::std::mem::transmute(initialized) };
            initialized as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let enumtype: u8 = unsafe { ::std::mem::transmute(enumtype) };
            enumtype as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_generic: u8 = unsafe { ::std::mem::transmute(is_generic) };
            is_generic as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let has_references: u8 = unsafe { ::std::mem::transmute(has_references) };
            has_references as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let init_pending: u8 = unsafe { ::std::mem::transmute(init_pending) };
            init_pending as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let size_inited: u8 = unsafe { ::std::mem::transmute(size_inited) };
            size_inited as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let has_finalize: u8 = unsafe { ::std::mem::transmute(has_finalize) };
            has_finalize as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let has_cctor: u8 = unsafe { ::std::mem::transmute(has_cctor) };
            has_cctor as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let is_blittable: u8 = unsafe { ::std::mem::transmute(is_blittable) };
            is_blittable as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let is_import_or_windows_runtime: u8 =
                unsafe { ::std::mem::transmute(is_import_or_windows_runtime) };
            is_import_or_windows_runtime as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let is_vtable_initialized: u8 = unsafe { ::std::mem::transmute(is_vtable_initialized) };
            is_vtable_initialized as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let has_initialization_error: u8 =
                unsafe { ::std::mem::transmute(has_initialization_error) };
            has_initialization_error as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppClass_Merged {
    pub _0: Il2CppClass_0,
    pub interfaceOffsets: *mut Il2CppRuntimeInterfaceOffsetPair,
    pub static_fields: *mut ::std::os::raw::c_void,
    pub rgctx_data: *const Il2CppRGCTXData,
    pub _1: Il2CppClass_1,
    pub vtable: [VirtualInvokeData; 32usize],
}
#[test]
fn bindgen_test_layout_Il2CppClass_Merged() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppClass_Merged> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppClass_Merged>(),
        824usize,
        concat!("Size of: ", stringify!(Il2CppClass_Merged))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppClass_Merged>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppClass_Merged))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_Merged),
            "::",
            stringify!(_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaceOffsets) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_Merged),
            "::",
            stringify!(interfaceOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_fields) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_Merged),
            "::",
            stringify!(static_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgctx_data) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_Merged),
            "::",
            stringify!(rgctx_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._1) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_Merged),
            "::",
            stringify!(_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass_Merged),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTypeDefinitionSizes {
    pub instance_size: u32,
    pub native_size: i32,
    pub static_fields_size: u32,
    pub thread_static_fields_size: u32,
}
#[test]
fn bindgen_test_layout_Il2CppTypeDefinitionSizes() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppTypeDefinitionSizes> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppTypeDefinitionSizes>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppTypeDefinitionSizes))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTypeDefinitionSizes>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppTypeDefinitionSizes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinitionSizes),
            "::",
            stringify!(instance_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).native_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinitionSizes),
            "::",
            stringify!(native_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_fields_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinitionSizes),
            "::",
            stringify!(static_fields_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_static_fields_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinitionSizes),
            "::",
            stringify!(thread_static_fields_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDomain {
    pub domain: *mut Il2CppAppDomain,
    pub setup: *mut Il2CppAppDomainSetup,
    pub default_context: *mut Il2CppAppContext,
    pub friendly_name: *const ::std::os::raw::c_char,
    pub domain_id: u32,
    pub threadpool_jobs: ::std::os::raw::c_int,
    pub agent_info: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppDomain() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDomain> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDomain>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppDomain))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDomain>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDomain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setup) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(default_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).friendly_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(friendly_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(domain_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadpool_jobs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(threadpool_jobs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).agent_info) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(agent_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppAssemblyName {
    pub name: *const ::std::os::raw::c_char,
    pub culture: *const ::std::os::raw::c_char,
    pub public_key: *const u8,
    pub hash_alg: u32,
    pub hash_len: i32,
    pub flags: u32,
    pub major: i32,
    pub minor: i32,
    pub build: i32,
    pub revision: i32,
    pub public_key_token: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_Il2CppAssemblyName() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppAssemblyName> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppAssemblyName>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppAssemblyName))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAssemblyName>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAssemblyName))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).culture) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(culture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).public_key) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(public_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash_alg) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(hash_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash_len) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(hash_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).build) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(build)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).public_key_token) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(public_key_token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppImage {
    pub name: *const ::std::os::raw::c_char,
    pub nameNoExt: *const ::std::os::raw::c_char,
    pub assembly: *mut Il2CppAssembly,
    pub typeCount: u32,
    pub exportedTypeCount: u32,
    pub customAttributeCount: u32,
    pub metadataHandle: Il2CppMetadataImageHandle,
    pub nameToClassHashTable: *mut Il2CppNameToTypeHandleHashTable,
    pub codeGenModule: *const Il2CppCodeGenModule,
    pub token: u32,
    pub dynamic: u8,
}
#[test]
fn bindgen_test_layout_Il2CppImage() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppImage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppImage>(),
        72usize,
        concat!("Size of: ", stringify!(Il2CppImage))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppImage>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppImage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameNoExt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(nameNoExt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assembly) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(assembly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(typeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exportedTypeCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(exportedTypeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customAttributeCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(customAttributeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadataHandle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(metadataHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameToClassHashTable) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(nameToClassHashTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codeGenModule) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(codeGenModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamic) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(dynamic)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppAssembly {
    pub image: *mut Il2CppImage,
    pub token: u32,
    pub referencedAssemblyStart: i32,
    pub referencedAssemblyCount: i32,
    pub aname: Il2CppAssemblyName,
}
#[test]
fn bindgen_test_layout_Il2CppAssembly() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppAssembly> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppAssembly>(),
        88usize,
        concat!("Size of: ", stringify!(Il2CppAssembly))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAssembly>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAssembly))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssembly),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssembly),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referencedAssemblyStart) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssembly),
            "::",
            stringify!(referencedAssemblyStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referencedAssemblyCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssembly),
            "::",
            stringify!(referencedAssemblyCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aname) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssembly),
            "::",
            stringify!(aname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppCodeGenOptions {
    pub enablePrimitiveValueTypeGenericSharing: u8,
    pub maximumRuntimeGenericDepth: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Il2CppCodeGenOptions() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppCodeGenOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppCodeGenOptions>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppCodeGenOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCodeGenOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppCodeGenOptions))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).enablePrimitiveValueTypeGenericSharing) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenOptions),
            "::",
            stringify!(enablePrimitiveValueTypeGenericSharing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximumRuntimeGenericDepth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenOptions),
            "::",
            stringify!(maximumRuntimeGenericDepth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppRange {
    pub start: i32,
    pub length: i32,
}
#[test]
fn bindgen_test_layout_Il2CppRange() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppRange>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppRange))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRange>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRange),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTokenRangePair {
    pub token: u32,
    pub range: Il2CppRange,
}
#[test]
fn bindgen_test_layout_Il2CppTokenRangePair() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppTokenRangePair> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppTokenRangePair>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppTokenRangePair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTokenRangePair>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppTokenRangePair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTokenRangePair),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTokenRangePair),
            "::",
            stringify!(range)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTokenIndexMethodTuple {
    pub token: u32,
    pub index: i32,
    pub method: *mut *mut ::std::os::raw::c_void,
    pub __genericMethodIndex: u32,
}
#[test]
fn bindgen_test_layout_Il2CppTokenIndexMethodTuple() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppTokenIndexMethodTuple> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppTokenIndexMethodTuple>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppTokenIndexMethodTuple))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTokenIndexMethodTuple>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppTokenIndexMethodTuple))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTokenIndexMethodTuple),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTokenIndexMethodTuple),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTokenIndexMethodTuple),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__genericMethodIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTokenIndexMethodTuple),
            "::",
            stringify!(__genericMethodIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTokenAdjustorThunkPair {
    pub token: u32,
    pub adjustorThunk: Il2CppMethodPointer,
}
#[test]
fn bindgen_test_layout_Il2CppTokenAdjustorThunkPair() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppTokenAdjustorThunkPair> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppTokenAdjustorThunkPair>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppTokenAdjustorThunkPair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTokenAdjustorThunkPair>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppTokenAdjustorThunkPair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTokenAdjustorThunkPair),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjustorThunk) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTokenAdjustorThunkPair),
            "::",
            stringify!(adjustorThunk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWindowsRuntimeFactoryTableEntry {
    pub type_: *const Il2CppType,
    pub createFactoryFunction: Il2CppMethodPointer,
}
#[test]
fn bindgen_test_layout_Il2CppWindowsRuntimeFactoryTableEntry() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppWindowsRuntimeFactoryTableEntry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppWindowsRuntimeFactoryTableEntry>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppWindowsRuntimeFactoryTableEntry)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWindowsRuntimeFactoryTableEntry>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWindowsRuntimeFactoryTableEntry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWindowsRuntimeFactoryTableEntry),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createFactoryFunction) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWindowsRuntimeFactoryTableEntry),
            "::",
            stringify!(createFactoryFunction)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppCodeGenModule {
    pub moduleName: *const ::std::os::raw::c_char,
    pub methodPointerCount: u32,
    pub methodPointers: *const Il2CppMethodPointer,
    pub adjustorThunkCount: u32,
    pub adjustorThunks: *const Il2CppTokenAdjustorThunkPair,
    pub invokerIndices: *const i32,
    pub reversePInvokeWrapperCount: u32,
    pub reversePInvokeWrapperIndices: *const Il2CppTokenIndexMethodTuple,
    pub rgctxRangesCount: u32,
    pub rgctxRanges: *const Il2CppTokenRangePair,
    pub rgctxsCount: u32,
    pub rgctxs: *const Il2CppRGCTXDefinition,
    pub debuggerMetadata: *const Il2CppDebuggerMetadataRegistration,
    pub customAttributeCacheGenerator: *const CustomAttributesCacheGenerator,
    pub moduleInitializer: Il2CppMethodPointer,
    pub staticConstructorTypeIndices: *mut TypeDefinitionIndex,
    pub metadataRegistration: *const Il2CppMetadataRegistration,
    pub codeRegistaration: *const Il2CppCodeRegistration,
}
#[test]
fn bindgen_test_layout_Il2CppCodeGenModule() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppCodeGenModule> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppCodeGenModule>(),
        144usize,
        concat!("Size of: ", stringify!(Il2CppCodeGenModule))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCodeGenModule>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppCodeGenModule))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).moduleName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(moduleName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodPointerCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(methodPointerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodPointers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(methodPointers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjustorThunkCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(adjustorThunkCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjustorThunks) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(adjustorThunks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invokerIndices) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(invokerIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reversePInvokeWrapperCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(reversePInvokeWrapperCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reversePInvokeWrapperIndices) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(reversePInvokeWrapperIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgctxRangesCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(rgctxRangesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgctxRanges) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(rgctxRanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgctxsCount) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(rgctxsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgctxs) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(rgctxs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debuggerMetadata) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(debuggerMetadata)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).customAttributeCacheGenerator) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(customAttributeCacheGenerator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).moduleInitializer) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(moduleInitializer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).staticConstructorTypeIndices) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(staticConstructorTypeIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadataRegistration) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(metadataRegistration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codeRegistaration) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenModule),
            "::",
            stringify!(codeRegistaration)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppCodeRegistration {
    pub reversePInvokeWrapperCount: u32,
    pub reversePInvokeWrappers: *const Il2CppMethodPointer,
    pub genericMethodPointersCount: u32,
    pub genericMethodPointers: *const Il2CppMethodPointer,
    pub genericAdjustorThunks: *const Il2CppMethodPointer,
    pub invokerPointersCount: u32,
    pub invokerPointers: *const InvokerMethod,
    pub unresolvedVirtualCallCount: u32,
    pub unresolvedVirtualCallPointers: *const Il2CppMethodPointer,
    pub interopDataCount: u32,
    pub interopData: *mut Il2CppInteropData,
    pub windowsRuntimeFactoryCount: u32,
    pub windowsRuntimeFactoryTable: *mut Il2CppWindowsRuntimeFactoryTableEntry,
    pub codeGenModulesCount: u32,
    pub codeGenModules: *mut *const Il2CppCodeGenModule,
}
#[test]
fn bindgen_test_layout_Il2CppCodeRegistration() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppCodeRegistration> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppCodeRegistration>(),
        120usize,
        concat!("Size of: ", stringify!(Il2CppCodeRegistration))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCodeRegistration>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppCodeRegistration))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reversePInvokeWrapperCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(reversePInvokeWrapperCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reversePInvokeWrappers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(reversePInvokeWrappers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericMethodPointersCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(genericMethodPointersCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericMethodPointers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(genericMethodPointers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericAdjustorThunks) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(genericAdjustorThunks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invokerPointersCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(invokerPointersCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invokerPointers) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(invokerPointers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unresolvedVirtualCallCount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(unresolvedVirtualCallCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unresolvedVirtualCallPointers) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(unresolvedVirtualCallPointers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interopDataCount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(interopDataCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interopData) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(interopData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowsRuntimeFactoryCount) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(windowsRuntimeFactoryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowsRuntimeFactoryTable) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(windowsRuntimeFactoryTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codeGenModulesCount) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(codeGenModulesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codeGenModules) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(codeGenModules)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataRegistration {
    pub genericClassesCount: i32,
    pub genericClasses: *const *mut Il2CppGenericClass,
    pub genericInstsCount: i32,
    pub genericInsts: *const *const Il2CppGenericInst,
    pub genericMethodTableCount: i32,
    pub genericMethodTable: *const Il2CppGenericMethodFunctionsDefinitions,
    pub typesCount: i32,
    pub types: *const *const Il2CppType,
    pub methodSpecsCount: i32,
    pub methodSpecs: *const Il2CppMethodSpec,
    pub fieldOffsetsCount: FieldIndex,
    pub fieldOffsets: *mut *const i32,
    pub typeDefinitionsSizesCount: TypeDefinitionIndex,
    pub typeDefinitionsSizes: *mut *const Il2CppTypeDefinitionSizes,
    pub metadataUsagesCount: usize,
    pub metadataUsages: *const *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataRegistration() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMetadataRegistration> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataRegistration>(),
        128usize,
        concat!("Size of: ", stringify!(Il2CppMetadataRegistration))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataRegistration>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataRegistration))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericClassesCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericClassesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericClasses) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericClasses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericInstsCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericInstsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericInsts) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericInsts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericMethodTableCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericMethodTableCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericMethodTable) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericMethodTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typesCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(typesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodSpecsCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(methodSpecsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodSpecs) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(methodSpecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldOffsetsCount) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(fieldOffsetsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldOffsets) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(fieldOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeDefinitionsSizesCount) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(typeDefinitionsSizesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typeDefinitionsSizes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(typeDefinitionsSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadataUsagesCount) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(metadataUsagesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadataUsages) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(metadataUsages)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppPerfCounters {
    pub jit_methods: u32,
    pub jit_bytes: u32,
    pub jit_time: u32,
    pub jit_failures: u32,
    pub exceptions_thrown: u32,
    pub exceptions_filters: u32,
    pub exceptions_finallys: u32,
    pub exceptions_depth: u32,
    pub aspnet_requests_queued: u32,
    pub aspnet_requests: u32,
    pub gc_collections0: u32,
    pub gc_collections1: u32,
    pub gc_collections2: u32,
    pub gc_promotions0: u32,
    pub gc_promotions1: u32,
    pub gc_promotion_finalizers: u32,
    pub gc_gen0size: u32,
    pub gc_gen1size: u32,
    pub gc_gen2size: u32,
    pub gc_lossize: u32,
    pub gc_fin_survivors: u32,
    pub gc_num_handles: u32,
    pub gc_allocated: u32,
    pub gc_induced: u32,
    pub gc_time: u32,
    pub gc_total_bytes: u32,
    pub gc_committed_bytes: u32,
    pub gc_reserved_bytes: u32,
    pub gc_num_pinned: u32,
    pub gc_sync_blocks: u32,
    pub remoting_calls: u32,
    pub remoting_channels: u32,
    pub remoting_proxies: u32,
    pub remoting_classes: u32,
    pub remoting_objects: u32,
    pub remoting_contexts: u32,
    pub loader_classes: u32,
    pub loader_total_classes: u32,
    pub loader_appdomains: u32,
    pub loader_total_appdomains: u32,
    pub loader_assemblies: u32,
    pub loader_total_assemblies: u32,
    pub loader_failures: u32,
    pub loader_bytes: u32,
    pub loader_appdomains_uloaded: u32,
    pub thread_contentions: u32,
    pub thread_queue_len: u32,
    pub thread_queue_max: u32,
    pub thread_num_logical: u32,
    pub thread_num_physical: u32,
    pub thread_cur_recognized: u32,
    pub thread_num_recognized: u32,
    pub interop_num_ccw: u32,
    pub interop_num_stubs: u32,
    pub interop_num_marshals: u32,
    pub security_num_checks: u32,
    pub security_num_link_checks: u32,
    pub security_time: u32,
    pub security_depth: u32,
    pub unused: u32,
    pub threadpool_workitems: u64,
    pub threadpool_ioworkitems: u64,
    pub threadpool_threads: ::std::os::raw::c_uint,
    pub threadpool_iothreads: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_Il2CppPerfCounters() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppPerfCounters> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppPerfCounters>(),
        264usize,
        concat!("Size of: ", stringify!(Il2CppPerfCounters))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppPerfCounters>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppPerfCounters))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jit_methods) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(jit_methods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jit_bytes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(jit_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jit_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(jit_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jit_failures) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(jit_failures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exceptions_thrown) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(exceptions_thrown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exceptions_filters) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(exceptions_filters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exceptions_finallys) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(exceptions_finallys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exceptions_depth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(exceptions_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspnet_requests_queued) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(aspnet_requests_queued)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspnet_requests) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(aspnet_requests)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_collections0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_collections0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_collections1) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_collections1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_collections2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_collections2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_promotions0) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_promotions0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_promotions1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_promotions1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_promotion_finalizers) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_promotion_finalizers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_gen0size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_gen0size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_gen1size) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_gen1size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_gen2size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_gen2size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_lossize) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_lossize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_fin_survivors) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_fin_survivors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_num_handles) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_num_handles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_allocated) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_allocated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_induced) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_induced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_total_bytes) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_total_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_committed_bytes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_committed_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_reserved_bytes) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_reserved_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_num_pinned) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_num_pinned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_sync_blocks) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_sync_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remoting_calls) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_calls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remoting_channels) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remoting_proxies) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_proxies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remoting_classes) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_classes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remoting_objects) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_objects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remoting_contexts) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_contexts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_classes) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_classes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_total_classes) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_total_classes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_appdomains) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_appdomains)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_total_appdomains) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_total_appdomains)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_assemblies) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_assemblies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_total_assemblies) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_total_assemblies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_failures) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_failures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_bytes) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_appdomains_uloaded) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_appdomains_uloaded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_contentions) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_contentions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_queue_len) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_queue_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_queue_max) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_queue_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_num_logical) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_num_logical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_num_physical) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_num_physical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_cur_recognized) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_cur_recognized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_num_recognized) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_num_recognized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interop_num_ccw) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(interop_num_ccw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interop_num_stubs) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(interop_num_stubs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interop_num_marshals) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(interop_num_marshals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_num_checks) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(security_num_checks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_num_link_checks) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(security_num_link_checks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_time) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(security_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_depth) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(security_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadpool_workitems) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(threadpool_workitems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadpool_ioworkitems) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(threadpool_ioworkitems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadpool_threads) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(threadpool_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadpool_iothreads) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(threadpool_iothreads)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWaitHandle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonitorData {
    _unused: [u8; 0],
}
pub type Il2CppVTable = Il2CppClass;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppObject {
    pub Il2CppClass: Il2CppObject__bindgen_ty_1,
    pub monitor: *mut MonitorData,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppObject__bindgen_ty_1 {
    pub klass: *mut Il2CppClass,
    pub vtable: *mut Il2CppVTable,
}
#[test]
fn bindgen_test_layout_Il2CppObject__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppObject__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppObject__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppObject__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppObject__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppObject__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppObject__bindgen_ty_1),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppObject__bindgen_ty_1),
            "::",
            stringify!(vtable)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppObject() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppObject> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppObject>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppObject))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppObject>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppObject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Il2CppClass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppObject),
            "::",
            stringify!(Il2CppClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).monitor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppObject),
            "::",
            stringify!(monitor)
        )
    );
}
pub type il2cpp_array_lower_bound_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppArrayBounds {
    pub length: il2cpp_array_size_t,
    pub lower_bound: il2cpp_array_lower_bound_t,
}
#[test]
fn bindgen_test_layout_Il2CppArrayBounds() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppArrayBounds> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppArrayBounds>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppArrayBounds))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppArrayBounds>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppArrayBounds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayBounds),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lower_bound) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayBounds),
            "::",
            stringify!(lower_bound)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppArray {
    pub obj: Il2CppObject,
    pub bounds: *mut Il2CppArrayBounds,
    pub max_length: il2cpp_array_size_t,
}
#[test]
fn bindgen_test_layout_Il2CppArray() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppArray>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppArray))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppArray>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArray),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArray),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArray),
            "::",
            stringify!(max_length)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppArraySize {
    pub obj: Il2CppObject,
    pub bounds: *mut Il2CppArrayBounds,
    pub max_length: il2cpp_array_size_t,
    pub vector: [*mut ::std::os::raw::c_void; 32usize],
}
#[test]
fn bindgen_test_layout_Il2CppArraySize() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppArraySize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppArraySize>(),
        288usize,
        concat!("Size of: ", stringify!(Il2CppArraySize))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppArraySize>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppArraySize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArraySize),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArraySize),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArraySize),
            "::",
            stringify!(max_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArraySize),
            "::",
            stringify!(vector)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppString {
    pub object: Il2CppObject,
    pub length: i32,
    pub chars: [Il2CppChar; 32usize],
}
#[test]
fn bindgen_test_layout_Il2CppString() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppString> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppString>(),
        88usize,
        concat!("Size of: ", stringify!(Il2CppString))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppString>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppString))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppString),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppString),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chars) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppString),
            "::",
            stringify!(chars)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionType {
    pub object: Il2CppObject,
    pub type_: *const Il2CppType,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionType() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionType>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppReflectionType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionType),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionType),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionRuntimeType {
    pub type_: Il2CppReflectionType,
    pub type_info: *mut Il2CppObject,
    pub genericCache: *mut Il2CppObject,
    pub serializationCtor: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionRuntimeType() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionRuntimeType> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionRuntimeType>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppReflectionRuntimeType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionRuntimeType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionRuntimeType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionRuntimeType),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionRuntimeType),
            "::",
            stringify!(type_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genericCache) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionRuntimeType),
            "::",
            stringify!(genericCache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serializationCtor) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionRuntimeType),
            "::",
            stringify!(serializationCtor)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionMonoType {
    pub type_: Il2CppReflectionRuntimeType,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionMonoType() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionMonoType> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionMonoType>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppReflectionMonoType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionMonoType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionMonoType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoType),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionEvent {
    pub object: Il2CppObject,
    pub cached_add_event: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionEvent() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionEvent>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppReflectionEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionEvent),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cached_add_event) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionEvent),
            "::",
            stringify!(cached_add_event)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionMonoEvent {
    pub event: Il2CppReflectionEvent,
    pub reflectedType: *mut Il2CppReflectionType,
    pub eventInfo: *const EventInfo,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionMonoEvent() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionMonoEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionMonoEvent>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppReflectionMonoEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionMonoEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionMonoEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEvent),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reflectedType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEvent),
            "::",
            stringify!(reflectedType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventInfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEvent),
            "::",
            stringify!(eventInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppReflectionMonoEventInfo {
    pub declaringType: *mut Il2CppReflectionType,
    pub reflectedType: *mut Il2CppReflectionType,
    pub name: *mut Il2CppString,
    pub addMethod: *mut Il2CppReflectionMethod,
    pub removeMethod: *mut Il2CppReflectionMethod,
    pub raiseMethod: *mut Il2CppReflectionMethod,
    pub eventAttributes: u32,
    pub otherMethods: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionMonoEventInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionMonoEventInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionMonoEventInfo>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppReflectionMonoEventInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionMonoEventInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionMonoEventInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).declaringType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(declaringType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reflectedType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(reflectedType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addMethod) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(addMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).removeMethod) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(removeMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raiseMethod) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(raiseMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventAttributes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(eventAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otherMethods) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(otherMethods)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionField {
    pub object: Il2CppObject,
    pub klass: *mut Il2CppClass,
    pub field: *mut FieldInfo,
    pub name: *mut Il2CppString,
    pub type_: *mut Il2CppReflectionType,
    pub attrs: u32,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionField() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionField> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionField>(),
        56usize,
        concat!("Size of: ", stringify!(Il2CppReflectionField))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionField>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionField))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(attrs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionProperty {
    pub object: Il2CppObject,
    pub klass: *mut Il2CppClass,
    pub property: *const PropertyInfo,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionProperty() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionProperty> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionProperty>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppReflectionProperty))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionProperty>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionProperty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionProperty),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionProperty),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionProperty),
            "::",
            stringify!(property)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionMethod {
    pub object: Il2CppObject,
    pub method: *const MethodInfo,
    pub name: *mut Il2CppString,
    pub reftype: *mut Il2CppReflectionType,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionMethod() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionMethod> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionMethod>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppReflectionMethod))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionMethod>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionMethod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMethod),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMethod),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMethod),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reftype) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMethod),
            "::",
            stringify!(reftype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionGenericMethod {
    pub base: Il2CppReflectionMethod,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionGenericMethod() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionGenericMethod> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionGenericMethod>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppReflectionGenericMethod))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionGenericMethod>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionGenericMethod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionGenericMethod),
            "::",
            stringify!(base)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodInfo {
    pub parent: *mut Il2CppReflectionType,
    pub ret: *mut Il2CppReflectionType,
    pub attrs: u32,
    pub implattrs: u32,
    pub callconv: u32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMethodInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodInfo>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppMethodInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMethodInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ret) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodInfo),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodInfo),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implattrs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodInfo),
            "::",
            stringify!(implattrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callconv) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodInfo),
            "::",
            stringify!(callconv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppPropertyInfo {
    pub parent: *mut Il2CppReflectionType,
    pub declaringType: *mut Il2CppReflectionType,
    pub name: *mut Il2CppString,
    pub get: *mut Il2CppReflectionMethod,
    pub set: *mut Il2CppReflectionMethod,
    pub attrs: u32,
}
#[test]
fn bindgen_test_layout_Il2CppPropertyInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppPropertyInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppPropertyInfo>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppPropertyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppPropertyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppPropertyInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).declaringType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(declaringType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(attrs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionParameter {
    pub object: Il2CppObject,
    pub ClassImpl: *mut Il2CppReflectionType,
    pub DefaultValueImpl: *mut Il2CppObject,
    pub MemberImpl: *mut Il2CppObject,
    pub NameImpl: *mut Il2CppString,
    pub PositionImpl: i32,
    pub AttrsImpl: u32,
    pub MarshalAsImpl: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionParameter() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionParameter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionParameter>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppReflectionParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionParameter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClassImpl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(ClassImpl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DefaultValueImpl) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(DefaultValueImpl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MemberImpl) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(MemberImpl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NameImpl) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(NameImpl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PositionImpl) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(PositionImpl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AttrsImpl) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(AttrsImpl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MarshalAsImpl) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(MarshalAsImpl)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionModule {
    pub obj: Il2CppObject,
    pub image: *const Il2CppImage,
    pub assembly: *mut Il2CppReflectionAssembly,
    pub fqname: *mut Il2CppString,
    pub name: *mut Il2CppString,
    pub scopename: *mut Il2CppString,
    pub is_resource: u8,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionModule() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionModule> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionModule>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppReflectionModule))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionModule>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionModule))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assembly) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(assembly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fqname) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(fqname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scopename) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(scopename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_resource) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(is_resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionAssemblyName {
    pub obj: Il2CppObject,
    pub name: *mut Il2CppString,
    pub codebase: *mut Il2CppString,
    pub major: i32,
    pub minor: i32,
    pub build: i32,
    pub revision: i32,
    pub cultureInfo: *mut Il2CppObject,
    pub flags: u32,
    pub hashalg: u32,
    pub keypair: *mut Il2CppObject,
    pub publicKey: *mut Il2CppArray,
    pub keyToken: *mut Il2CppArray,
    pub versioncompat: u32,
    pub version: *mut Il2CppObject,
    pub processor_architecture: u32,
    pub contentType: u32,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionAssemblyName() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionAssemblyName> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionAssemblyName>(),
        112usize,
        concat!("Size of: ", stringify!(Il2CppReflectionAssemblyName))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionAssemblyName>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionAssemblyName))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codebase) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(codebase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).build) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(build)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cultureInfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(cultureInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashalg) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(hashalg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keypair) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(keypair)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).publicKey) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(publicKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyToken) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(keyToken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).versioncompat) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(versioncompat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).processor_architecture) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(processor_architecture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contentType) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(contentType)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionAssembly {
    pub object: Il2CppObject,
    pub assembly: *const Il2CppAssembly,
    pub resolve_event_holder: *mut Il2CppObject,
    pub evidence: *mut Il2CppObject,
    pub minimum: *mut Il2CppObject,
    pub optional: *mut Il2CppObject,
    pub refuse: *mut Il2CppObject,
    pub granted: *mut Il2CppObject,
    pub denied: *mut Il2CppObject,
    pub from_byte_array: u8,
    pub name: *mut Il2CppString,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionAssembly() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionAssembly> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionAssembly>(),
        96usize,
        concat!("Size of: ", stringify!(Il2CppReflectionAssembly))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionAssembly>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionAssembly))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assembly) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(assembly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolve_event_holder) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(resolve_event_holder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evidence) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(evidence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(optional)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refuse) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(refuse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).granted) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(granted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).denied) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(denied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_byte_array) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(from_byte_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionMarshal {
    pub object: Il2CppObject,
    pub count: i32,
    pub type_: i32,
    pub eltype: i32,
    pub guid: *mut Il2CppString,
    pub mcookie: *mut Il2CppString,
    pub marshaltype: *mut Il2CppString,
    pub marshaltyperef: *mut Il2CppObject,
    pub param_num: i32,
    pub has_size: u8,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionMarshal() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionMarshal> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionMarshal>(),
        72usize,
        concat!("Size of: ", stringify!(Il2CppReflectionMarshal))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionMarshal>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionMarshal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eltype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(eltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcookie) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(mcookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marshaltype) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(marshaltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marshaltyperef) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(marshaltyperef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_num) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(param_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_size) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(has_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionPointer {
    pub object: Il2CppObject,
    pub data: *mut ::std::os::raw::c_void,
    pub type_: *mut Il2CppReflectionType,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionPointer() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppReflectionPointer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionPointer>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppReflectionPointer))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionPointer>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionPointer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionPointer),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionPointer),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionPointer),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppInternalThread {
    pub obj: Il2CppObject,
    pub lock_thread_id: ::std::os::raw::c_int,
    pub handle: *mut ::std::os::raw::c_void,
    pub native_handle: *mut ::std::os::raw::c_void,
    pub cached_culture_info: *mut Il2CppArray,
    pub name: *mut Il2CppChar,
    pub name_len: ::std::os::raw::c_int,
    pub state: u32,
    pub abort_exc: *mut Il2CppObject,
    pub abort_state_handle: ::std::os::raw::c_int,
    pub tid: u64,
    pub debugger_thread: isize,
    pub static_data: *mut *mut ::std::os::raw::c_void,
    pub runtime_thread_info: *mut ::std::os::raw::c_void,
    pub current_appcontext: *mut Il2CppObject,
    pub root_domain_thread: *mut Il2CppObject,
    pub _serialized_principal: *mut Il2CppArray,
    pub _serialized_principal_version: ::std::os::raw::c_int,
    pub appdomain_refs: *mut ::std::os::raw::c_void,
    pub interruption_requested: i32,
    pub synch_cs: *mut ::std::os::raw::c_void,
    pub threadpool_thread: u8,
    pub thread_interrupt_requested: u8,
    pub stack_size: ::std::os::raw::c_int,
    pub apartment_state: u8,
    pub critical_region_level: ::std::os::raw::c_int,
    pub managed_id: ::std::os::raw::c_int,
    pub small_id: u32,
    pub manage_callback: *mut ::std::os::raw::c_void,
    pub interrupt_on_stop: *mut ::std::os::raw::c_void,
    pub flags: isize,
    pub thread_pinning_ref: *mut ::std::os::raw::c_void,
    pub abort_protected_block_count: *mut ::std::os::raw::c_void,
    pub priority: i32,
    pub owned_mutexes: *mut ::std::os::raw::c_void,
    pub suspended: *mut ::std::os::raw::c_void,
    pub self_suspended: i32,
    pub thread_state: usize,
    pub unused2: usize,
    pub last: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppInternalThread() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppInternalThread> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppInternalThread>(),
        288usize,
        concat!("Size of: ", stringify!(Il2CppInternalThread))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppInternalThread>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppInternalThread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_thread_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(lock_thread_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).native_handle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(native_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cached_culture_info) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(cached_culture_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_len) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort_exc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(abort_exc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort_state_handle) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(abort_state_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tid) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debugger_thread) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(debugger_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_data) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(static_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runtime_thread_info) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(runtime_thread_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_appcontext) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(current_appcontext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_domain_thread) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(root_domain_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._serialized_principal) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(_serialized_principal)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._serialized_principal_version) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(_serialized_principal_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appdomain_refs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(appdomain_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interruption_requested) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(interruption_requested)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).synch_cs) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(synch_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadpool_thread) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(threadpool_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_interrupt_requested) as usize - ptr as usize },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(thread_interrupt_requested)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_size) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apartment_state) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(apartment_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).critical_region_level) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(critical_region_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).managed_id) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(managed_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).small_id) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(small_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manage_callback) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(manage_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interrupt_on_stop) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(interrupt_on_stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_pinning_ref) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(thread_pinning_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort_protected_block_count) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(abort_protected_block_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owned_mutexes) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(owned_mutexes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspended) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(suspended)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).self_suspended) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(self_suspended)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_state) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(thread_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused2) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(unused2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(last)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppIOSelectorJob {
    pub object: Il2CppObject,
    pub operation: i32,
    pub callback: *mut Il2CppObject,
    pub state: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppIOSelectorJob() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppIOSelectorJob> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppIOSelectorJob>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppIOSelectorJob))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppIOSelectorJob>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppIOSelectorJob))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOSelectorJob),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOSelectorJob),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOSelectorJob),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOSelectorJob),
            "::",
            stringify!(state)
        )
    );
}
pub const Il2CppCallType_Il2Cpp_CallType_Sync: Il2CppCallType = 0;
pub const Il2CppCallType_Il2Cpp_CallType_BeginInvoke: Il2CppCallType = 1;
pub const Il2CppCallType_Il2Cpp_CallType_EndInvoke: Il2CppCallType = 2;
pub const Il2CppCallType_Il2Cpp_CallType_OneWay: Il2CppCallType = 3;
pub type Il2CppCallType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppMethodMessage {
    pub obj: Il2CppObject,
    pub method: *mut Il2CppReflectionMethod,
    pub args: *mut Il2CppArray,
    pub names: *mut Il2CppArray,
    pub arg_types: *mut Il2CppArray,
    pub ctx: *mut Il2CppObject,
    pub rval: *mut Il2CppObject,
    pub exc: *mut Il2CppObject,
    pub async_result: *mut Il2CppAsyncResult,
    pub call_type: u32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodMessage() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMethodMessage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodMessage>(),
        88usize,
        concat!("Size of: ", stringify!(Il2CppMethodMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodMessage>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMethodMessage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_types) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(arg_types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rval) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(rval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(exc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_result) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(async_result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_type) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(call_type)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppAppDomainSetup {
    pub object: Il2CppObject,
    pub application_base: *mut Il2CppString,
    pub application_name: *mut Il2CppString,
    pub cache_path: *mut Il2CppString,
    pub configuration_file: *mut Il2CppString,
    pub dynamic_base: *mut Il2CppString,
    pub license_file: *mut Il2CppString,
    pub private_bin_path: *mut Il2CppString,
    pub private_bin_path_probe: *mut Il2CppString,
    pub shadow_copy_directories: *mut Il2CppString,
    pub shadow_copy_files: *mut Il2CppString,
    pub publisher_policy: u8,
    pub path_changed: u8,
    pub loader_optimization: ::std::os::raw::c_int,
    pub disallow_binding_redirects: u8,
    pub disallow_code_downloads: u8,
    pub activation_arguments: *mut Il2CppObject,
    pub domain_initializer: *mut Il2CppObject,
    pub application_trust: *mut Il2CppObject,
    pub domain_initializer_args: *mut Il2CppArray,
    pub disallow_appbase_probe: u8,
    pub configuration_bytes: *mut Il2CppArray,
    pub serialized_non_primitives: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppAppDomainSetup() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppAppDomainSetup> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppAppDomainSetup>(),
        168usize,
        concat!("Size of: ", stringify!(Il2CppAppDomainSetup))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAppDomainSetup>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAppDomainSetup))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).application_base) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(application_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).application_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(application_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_path) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(cache_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configuration_file) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(configuration_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamic_base) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(dynamic_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).license_file) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(license_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_bin_path) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(private_bin_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_bin_path_probe) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(private_bin_path_probe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_copy_directories) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(shadow_copy_directories)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_copy_files) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(shadow_copy_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).publisher_policy) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(publisher_policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_changed) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(path_changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_optimization) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(loader_optimization)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disallow_binding_redirects) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(disallow_binding_redirects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disallow_code_downloads) as usize - ptr as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(disallow_code_downloads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activation_arguments) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(activation_arguments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain_initializer) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(domain_initializer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).application_trust) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(application_trust)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain_initializer_args) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(domain_initializer_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disallow_appbase_probe) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(disallow_appbase_probe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configuration_bytes) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(configuration_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialized_non_primitives) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(serialized_non_primitives)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppThread {
    pub obj: Il2CppObject,
    pub internal_thread: *mut Il2CppInternalThread,
    pub start_obj: *mut Il2CppObject,
    pub pending_exception: *mut Il2CppException,
    pub principal: *mut Il2CppObject,
    pub principal_version: i32,
    pub delegate: *mut Il2CppDelegate,
    pub executionContext: *mut Il2CppObject,
    pub executionContextBelongsToOuterScope: u8,
}
#[test]
fn bindgen_test_layout_Il2CppThread() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppThread> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppThread>(),
        80usize,
        concat!("Size of: ", stringify!(Il2CppThread))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppThread>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppThread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_thread) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(internal_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_obj) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(start_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending_exception) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(pending_exception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).principal) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(principal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).principal_version) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(principal_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delegate) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(delegate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executionContext) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(executionContext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).executionContextBelongsToOuterScope) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(executionContextBelongsToOuterScope)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppException {
    pub object: Il2CppObject,
    pub className: *mut Il2CppString,
    pub message: *mut Il2CppString,
    pub _data: *mut Il2CppObject,
    pub inner_ex: *mut Il2CppException,
    pub _helpURL: *mut Il2CppString,
    pub trace_ips: *mut Il2CppArray,
    pub stack_trace: *mut Il2CppString,
    pub remote_stack_trace: *mut Il2CppString,
    pub remote_stack_index: ::std::os::raw::c_int,
    pub _dynamicMethods: *mut Il2CppObject,
    pub hresult: il2cpp_hresult_t,
    pub source: *mut Il2CppString,
    pub safeSerializationManager: *mut Il2CppObject,
    pub captured_traces: *mut Il2CppArray,
    pub native_trace_ips: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppException() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppException> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppException>(),
        136usize,
        concat!("Size of: ", stringify!(Il2CppException))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppException>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppException))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).className) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(className)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner_ex) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(inner_ex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._helpURL) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(_helpURL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trace_ips) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(trace_ips)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_trace) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(stack_trace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_stack_trace) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(remote_stack_trace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_stack_index) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(remote_stack_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dynamicMethods) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(_dynamicMethods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hresult) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(hresult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).safeSerializationManager) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(safeSerializationManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captured_traces) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(captured_traces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).native_trace_ips) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(native_trace_ips)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppSystemException {
    pub base: Il2CppException,
}
#[test]
fn bindgen_test_layout_Il2CppSystemException() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppSystemException> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppSystemException>(),
        136usize,
        concat!("Size of: ", stringify!(Il2CppSystemException))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSystemException>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSystemException))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSystemException),
            "::",
            stringify!(base)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppArgumentException {
    pub base: Il2CppException,
    pub argName: *mut Il2CppString,
}
#[test]
fn bindgen_test_layout_Il2CppArgumentException() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppArgumentException> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppArgumentException>(),
        144usize,
        concat!("Size of: ", stringify!(Il2CppArgumentException))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppArgumentException>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppArgumentException))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArgumentException),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argName) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArgumentException),
            "::",
            stringify!(argName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTypedRef {
    pub type_: *const Il2CppType,
    pub value: *mut ::std::os::raw::c_void,
    pub klass: *mut Il2CppClass,
}
#[test]
fn bindgen_test_layout_Il2CppTypedRef() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppTypedRef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppTypedRef>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppTypedRef))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTypedRef>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppTypedRef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypedRef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypedRef),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypedRef),
            "::",
            stringify!(klass)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppDelegate {
    pub object: Il2CppObject,
    pub method_ptr: Il2CppMethodPointer,
    pub invoke_impl: InvokerMethod,
    pub target: *mut Il2CppObject,
    pub method: *const MethodInfo,
    pub delegate_trampoline: *mut ::std::os::raw::c_void,
    pub extraArg: isize,
    pub method_code: *mut *mut u8,
    pub method_info: *mut Il2CppReflectionMethod,
    pub original_method_info: *mut Il2CppReflectionMethod,
    pub data: *mut Il2CppObject,
    pub method_is_virtual: u8,
}
#[test]
fn bindgen_test_layout_Il2CppDelegate() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDelegate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDelegate>(),
        104usize,
        concat!("Size of: ", stringify!(Il2CppDelegate))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDelegate>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDelegate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(method_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invoke_impl) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(invoke_impl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delegate_trampoline) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(delegate_trampoline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extraArg) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(extraArg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_code) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(method_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_info) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(method_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).original_method_info) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(original_method_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_is_virtual) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(method_is_virtual)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppMulticastDelegate {
    pub delegate: Il2CppDelegate,
    pub delegates: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppMulticastDelegate() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMulticastDelegate> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMulticastDelegate>(),
        112usize,
        concat!("Size of: ", stringify!(Il2CppMulticastDelegate))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMulticastDelegate>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMulticastDelegate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delegate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMulticastDelegate),
            "::",
            stringify!(delegate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delegates) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMulticastDelegate),
            "::",
            stringify!(delegates)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppMarshalByRefObject {
    pub obj: Il2CppObject,
    pub identity: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppMarshalByRefObject() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppMarshalByRefObject> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppMarshalByRefObject>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppMarshalByRefObject))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMarshalByRefObject>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMarshalByRefObject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMarshalByRefObject),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMarshalByRefObject),
            "::",
            stringify!(identity)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppAppDomain {
    pub mbr: Il2CppMarshalByRefObject,
    pub data: *mut Il2CppDomain,
}
#[test]
fn bindgen_test_layout_Il2CppAppDomain() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppAppDomain> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppAppDomain>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppAppDomain))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAppDomain>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAppDomain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomain),
            "::",
            stringify!(mbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomain),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppStackFrame {
    pub obj: Il2CppObject,
    pub il_offset: i32,
    pub native_offset: i32,
    pub methodAddress: u64,
    pub methodIndex: u32,
    pub method: *mut Il2CppReflectionMethod,
    pub filename: *mut Il2CppString,
    pub line: i32,
    pub column: i32,
    pub internal_method_name: *mut Il2CppString,
}
#[test]
fn bindgen_test_layout_Il2CppStackFrame() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppStackFrame> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppStackFrame>(),
        72usize,
        concat!("Size of: ", stringify!(Il2CppStackFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStackFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppStackFrame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).il_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(il_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).native_offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(native_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodAddress) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(methodAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).methodIndex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(methodIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_method_name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(internal_method_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppDateTimeFormatInfo {
    pub obj: Il2CppObject,
    pub CultureData: *mut Il2CppObject,
    pub Name: *mut Il2CppString,
    pub LangName: *mut Il2CppString,
    pub CompareInfo: *mut Il2CppObject,
    pub CultureInfo: *mut Il2CppObject,
    pub AMDesignator: *mut Il2CppString,
    pub PMDesignator: *mut Il2CppString,
    pub DateSeparator: *mut Il2CppString,
    pub GeneralShortTimePattern: *mut Il2CppString,
    pub GeneralLongTimePattern: *mut Il2CppString,
    pub TimeSeparator: *mut Il2CppString,
    pub MonthDayPattern: *mut Il2CppString,
    pub DateTimeOffsetPattern: *mut Il2CppString,
    pub Calendar: *mut Il2CppObject,
    pub FirstDayOfWeek: u32,
    pub CalendarWeekRule: u32,
    pub FullDateTimePattern: *mut Il2CppString,
    pub AbbreviatedDayNames: *mut Il2CppArray,
    pub ShortDayNames: *mut Il2CppArray,
    pub DayNames: *mut Il2CppArray,
    pub AbbreviatedMonthNames: *mut Il2CppArray,
    pub MonthNames: *mut Il2CppArray,
    pub GenitiveMonthNames: *mut Il2CppArray,
    pub GenitiveAbbreviatedMonthNames: *mut Il2CppArray,
    pub LeapYearMonthNames: *mut Il2CppArray,
    pub LongDatePattern: *mut Il2CppString,
    pub ShortDatePattern: *mut Il2CppString,
    pub YearMonthPattern: *mut Il2CppString,
    pub LongTimePattern: *mut Il2CppString,
    pub ShortTimePattern: *mut Il2CppString,
    pub YearMonthPatterns: *mut Il2CppArray,
    pub ShortDatePatterns: *mut Il2CppArray,
    pub LongDatePatterns: *mut Il2CppArray,
    pub ShortTimePatterns: *mut Il2CppArray,
    pub LongTimePatterns: *mut Il2CppArray,
    pub EraNames: *mut Il2CppArray,
    pub AbbrevEraNames: *mut Il2CppArray,
    pub AbbrevEnglishEraNames: *mut Il2CppArray,
    pub OptionalCalendars: *mut Il2CppArray,
    pub readOnly: u8,
    pub FormatFlags: i32,
    pub CultureID: i32,
    pub UseUserOverride: u8,
    pub UseCalendarInfo: u8,
    pub DataItem: i32,
    pub IsDefaultCalendar: u8,
    pub DateWords: *mut Il2CppArray,
    pub FullTimeSpanPositivePattern: *mut Il2CppString,
    pub FullTimeSpanNegativePattern: *mut Il2CppString,
    pub dtfiTokenHash: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppDateTimeFormatInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDateTimeFormatInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDateTimeFormatInfo>(),
        376usize,
        concat!("Size of: ", stringify!(Il2CppDateTimeFormatInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDateTimeFormatInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDateTimeFormatInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CultureData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(CultureData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LangName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LangName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CompareInfo) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(CompareInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CultureInfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(CultureInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AMDesignator) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(AMDesignator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PMDesignator) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(PMDesignator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DateSeparator) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(DateSeparator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GeneralShortTimePattern) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(GeneralShortTimePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GeneralLongTimePattern) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(GeneralLongTimePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeSeparator) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(TimeSeparator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MonthDayPattern) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(MonthDayPattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DateTimeOffsetPattern) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(DateTimeOffsetPattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Calendar) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(Calendar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FirstDayOfWeek) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(FirstDayOfWeek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CalendarWeekRule) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(CalendarWeekRule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FullDateTimePattern) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(FullDateTimePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbbreviatedDayNames) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(AbbreviatedDayNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShortDayNames) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(ShortDayNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DayNames) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(DayNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbbreviatedMonthNames) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(AbbreviatedMonthNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MonthNames) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(MonthNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenitiveMonthNames) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(GenitiveMonthNames)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GenitiveAbbreviatedMonthNames) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(GenitiveAbbreviatedMonthNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LeapYearMonthNames) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LeapYearMonthNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LongDatePattern) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LongDatePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShortDatePattern) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(ShortDatePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).YearMonthPattern) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(YearMonthPattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LongTimePattern) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LongTimePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShortTimePattern) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(ShortTimePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).YearMonthPatterns) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(YearMonthPatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShortDatePatterns) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(ShortDatePatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LongDatePatterns) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LongDatePatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShortTimePatterns) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(ShortTimePatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LongTimePatterns) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LongTimePatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EraNames) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(EraNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbbrevEraNames) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(AbbrevEraNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbbrevEnglishEraNames) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(AbbrevEnglishEraNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OptionalCalendars) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(OptionalCalendars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readOnly) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(readOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FormatFlags) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(FormatFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CultureID) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(CultureID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UseUserOverride) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(UseUserOverride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UseCalendarInfo) as usize - ptr as usize },
        333usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(UseCalendarInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataItem) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(DataItem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsDefaultCalendar) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(IsDefaultCalendar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DateWords) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(DateWords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FullTimeSpanPositivePattern) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(FullTimeSpanPositivePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FullTimeSpanNegativePattern) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(FullTimeSpanNegativePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtfiTokenHash) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(dtfiTokenHash)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppNumberFormatInfo {
    pub obj: Il2CppObject,
    pub numberGroupSizes: *mut Il2CppArray,
    pub currencyGroupSizes: *mut Il2CppArray,
    pub percentGroupSizes: *mut Il2CppArray,
    pub positiveSign: *mut Il2CppString,
    pub negativeSign: *mut Il2CppString,
    pub numberDecimalSeparator: *mut Il2CppString,
    pub numberGroupSeparator: *mut Il2CppString,
    pub currencyGroupSeparator: *mut Il2CppString,
    pub currencyDecimalSeparator: *mut Il2CppString,
    pub currencySymbol: *mut Il2CppString,
    pub ansiCurrencySymbol: *mut Il2CppString,
    pub naNSymbol: *mut Il2CppString,
    pub positiveInfinitySymbol: *mut Il2CppString,
    pub negativeInfinitySymbol: *mut Il2CppString,
    pub percentDecimalSeparator: *mut Il2CppString,
    pub percentGroupSeparator: *mut Il2CppString,
    pub percentSymbol: *mut Il2CppString,
    pub perMilleSymbol: *mut Il2CppString,
    pub nativeDigits: *mut Il2CppArray,
    pub dataItem: ::std::os::raw::c_int,
    pub numberDecimalDigits: ::std::os::raw::c_int,
    pub currencyDecimalDigits: ::std::os::raw::c_int,
    pub currencyPositivePattern: ::std::os::raw::c_int,
    pub currencyNegativePattern: ::std::os::raw::c_int,
    pub numberNegativePattern: ::std::os::raw::c_int,
    pub percentPositivePattern: ::std::os::raw::c_int,
    pub percentNegativePattern: ::std::os::raw::c_int,
    pub percentDecimalDigits: ::std::os::raw::c_int,
    pub digitSubstitution: ::std::os::raw::c_int,
    pub readOnly: u8,
    pub useUserOverride: u8,
    pub isInvariant: u8,
    pub validForParseAsNumber: u8,
    pub validForParseAsCurrency: u8,
}
#[test]
fn bindgen_test_layout_Il2CppNumberFormatInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppNumberFormatInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppNumberFormatInfo>(),
        216usize,
        concat!("Size of: ", stringify!(Il2CppNumberFormatInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppNumberFormatInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppNumberFormatInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numberGroupSizes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(numberGroupSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currencyGroupSizes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyGroupSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).percentGroupSizes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentGroupSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positiveSign) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(positiveSign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negativeSign) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(negativeSign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numberDecimalSeparator) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(numberDecimalSeparator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numberGroupSeparator) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(numberGroupSeparator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currencyGroupSeparator) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyGroupSeparator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currencyDecimalSeparator) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyDecimalSeparator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currencySymbol) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencySymbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ansiCurrencySymbol) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(ansiCurrencySymbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naNSymbol) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(naNSymbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positiveInfinitySymbol) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(positiveInfinitySymbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negativeInfinitySymbol) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(negativeInfinitySymbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).percentDecimalSeparator) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentDecimalSeparator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).percentGroupSeparator) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentGroupSeparator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).percentSymbol) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentSymbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perMilleSymbol) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(perMilleSymbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nativeDigits) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(nativeDigits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataItem) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(dataItem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numberDecimalDigits) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(numberDecimalDigits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currencyDecimalDigits) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyDecimalDigits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currencyPositivePattern) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyPositivePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currencyNegativePattern) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyNegativePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numberNegativePattern) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(numberNegativePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).percentPositivePattern) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentPositivePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).percentNegativePattern) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentNegativePattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).percentDecimalDigits) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentDecimalDigits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digitSubstitution) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(digitSubstitution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readOnly) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(readOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useUserOverride) as usize - ptr as usize },
        209usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(useUserOverride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isInvariant) as usize - ptr as usize },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(isInvariant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validForParseAsNumber) as usize - ptr as usize },
        211usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(validForParseAsNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validForParseAsCurrency) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(validForParseAsCurrency)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppCultureData {
    pub obj: Il2CppObject,
    pub AMDesignator: *mut Il2CppString,
    pub PMDesignator: *mut Il2CppString,
    pub TimeSeparator: *mut Il2CppString,
    pub LongTimePatterns: *mut Il2CppArray,
    pub ShortTimePatterns: *mut Il2CppArray,
    pub FirstDayOfWeek: u32,
    pub CalendarWeekRule: u32,
}
#[test]
fn bindgen_test_layout_Il2CppCultureData() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppCultureData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppCultureData>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppCultureData))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCultureData>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppCultureData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AMDesignator) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(AMDesignator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PMDesignator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(PMDesignator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeSeparator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(TimeSeparator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LongTimePatterns) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(LongTimePatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShortTimePatterns) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(ShortTimePatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FirstDayOfWeek) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(FirstDayOfWeek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CalendarWeekRule) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(CalendarWeekRule)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppCalendarData {
    pub obj: Il2CppObject,
    pub NativeName: *mut Il2CppString,
    pub ShortDatePatterns: *mut Il2CppArray,
    pub YearMonthPatterns: *mut Il2CppArray,
    pub LongDatePatterns: *mut Il2CppArray,
    pub MonthDayPattern: *mut Il2CppString,
    pub EraNames: *mut Il2CppArray,
    pub AbbreviatedEraNames: *mut Il2CppArray,
    pub AbbreviatedEnglishEraNames: *mut Il2CppArray,
    pub DayNames: *mut Il2CppArray,
    pub AbbreviatedDayNames: *mut Il2CppArray,
    pub SuperShortDayNames: *mut Il2CppArray,
    pub MonthNames: *mut Il2CppArray,
    pub AbbreviatedMonthNames: *mut Il2CppArray,
    pub GenitiveMonthNames: *mut Il2CppArray,
    pub GenitiveAbbreviatedMonthNames: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppCalendarData() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppCalendarData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppCalendarData>(),
        136usize,
        concat!("Size of: ", stringify!(Il2CppCalendarData))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCalendarData>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppCalendarData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NativeName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(NativeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShortDatePatterns) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(ShortDatePatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).YearMonthPatterns) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(YearMonthPatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LongDatePatterns) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(LongDatePatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MonthDayPattern) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(MonthDayPattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EraNames) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(EraNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbbreviatedEraNames) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(AbbreviatedEraNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbbreviatedEnglishEraNames) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(AbbreviatedEnglishEraNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DayNames) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(DayNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbbreviatedDayNames) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(AbbreviatedDayNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SuperShortDayNames) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(SuperShortDayNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MonthNames) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(MonthNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbbreviatedMonthNames) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(AbbreviatedMonthNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenitiveMonthNames) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(GenitiveMonthNames)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GenitiveAbbreviatedMonthNames) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(GenitiveAbbreviatedMonthNames)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppCultureInfo {
    pub obj: Il2CppObject,
    pub is_read_only: u8,
    pub lcid: i32,
    pub parent_lcid: i32,
    pub datetime_index: i32,
    pub number_index: i32,
    pub default_calendar_type: i32,
    pub use_user_override: u8,
    pub number_format: *mut Il2CppNumberFormatInfo,
    pub datetime_format: *mut Il2CppDateTimeFormatInfo,
    pub textinfo: *mut Il2CppObject,
    pub name: *mut Il2CppString,
    pub englishname: *mut Il2CppString,
    pub nativename: *mut Il2CppString,
    pub iso3lang: *mut Il2CppString,
    pub iso2lang: *mut Il2CppString,
    pub win3lang: *mut Il2CppString,
    pub territory: *mut Il2CppString,
    pub native_calendar_names: *mut Il2CppArray,
    pub compareinfo: *mut Il2CppString,
    pub text_info_data: *const ::std::os::raw::c_void,
    pub dataItem: ::std::os::raw::c_int,
    pub calendar: *mut Il2CppObject,
    pub parent_culture: *mut Il2CppObject,
    pub constructed: u8,
    pub cached_serialized_form: *mut Il2CppArray,
    pub cultureData: *mut Il2CppObject,
    pub isInherited: u8,
}
#[test]
fn bindgen_test_layout_Il2CppCultureInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppCultureInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppCultureInfo>(),
        208usize,
        concat!("Size of: ", stringify!(Il2CppCultureInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCultureInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppCultureInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_read_only) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lcid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(lcid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_lcid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(parent_lcid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datetime_index) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(datetime_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_index) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(number_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_calendar_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(default_calendar_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_user_override) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(use_user_override)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_format) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(number_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datetime_format) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(datetime_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textinfo) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(textinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).englishname) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(englishname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nativename) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(nativename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iso3lang) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(iso3lang)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iso2lang) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(iso2lang)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win3lang) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(win3lang)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).territory) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(territory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).native_calendar_names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(native_calendar_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compareinfo) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(compareinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_info_data) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(text_info_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataItem) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(dataItem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calendar) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(calendar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_culture) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(parent_culture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constructed) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(constructed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cached_serialized_form) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(cached_serialized_form)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cultureData) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(cultureData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isInherited) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(isInherited)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppRegionInfo {
    pub obj: Il2CppObject,
    pub geo_id: i32,
    pub iso2name: *mut Il2CppString,
    pub iso3name: *mut Il2CppString,
    pub win3name: *mut Il2CppString,
    pub english_name: *mut Il2CppString,
    pub native_name: *mut Il2CppString,
    pub currency_symbol: *mut Il2CppString,
    pub iso_currency_symbol: *mut Il2CppString,
    pub currency_english_name: *mut Il2CppString,
    pub currency_native_name: *mut Il2CppString,
}
#[test]
fn bindgen_test_layout_Il2CppRegionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppRegionInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppRegionInfo>(),
        96usize,
        concat!("Size of: ", stringify!(Il2CppRegionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRegionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppRegionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geo_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(geo_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iso2name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(iso2name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iso3name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(iso3name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win3name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(win3name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).english_name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(english_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).native_name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(native_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currency_symbol) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iso_currency_symbol) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(iso_currency_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currency_english_name) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(currency_english_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currency_native_name) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(currency_native_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppSafeHandle {
    pub base: Il2CppObject,
    pub handle: *mut ::std::os::raw::c_void,
    pub state: ::std::os::raw::c_int,
    pub owns_handle: u8,
    pub fullyInitialized: u8,
}
#[test]
fn bindgen_test_layout_Il2CppSafeHandle() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppSafeHandle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppSafeHandle>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppSafeHandle))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSafeHandle>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSafeHandle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeHandle),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeHandle),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeHandle),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owns_handle) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeHandle),
            "::",
            stringify!(owns_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullyInitialized) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeHandle),
            "::",
            stringify!(fullyInitialized)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppStringBuilder {
    pub object: Il2CppObject,
    pub chunkChars: *mut Il2CppArray,
    pub chunkPrevious: *mut Il2CppStringBuilder,
    pub chunkLength: ::std::os::raw::c_int,
    pub chunkOffset: ::std::os::raw::c_int,
    pub maxCapacity: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Il2CppStringBuilder() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppStringBuilder> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppStringBuilder>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppStringBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStringBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppStringBuilder))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunkChars) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(chunkChars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunkPrevious) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(chunkPrevious)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunkLength) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(chunkLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunkOffset) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(chunkOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxCapacity) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(maxCapacity)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppSocketAddress {
    pub base: Il2CppObject,
    pub m_Size: ::std::os::raw::c_int,
    pub data: *mut Il2CppArray,
    pub m_changed: u8,
    pub m_hash: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Il2CppSocketAddress() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppSocketAddress> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppSocketAddress>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppSocketAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSocketAddress>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSocketAddress))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAddress),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_Size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAddress),
            "::",
            stringify!(m_Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAddress),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_changed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAddress),
            "::",
            stringify!(m_changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_hash) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAddress),
            "::",
            stringify!(m_hash)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppSortKey {
    pub base: Il2CppObject,
    pub str_: *mut Il2CppString,
    pub key: *mut Il2CppArray,
    pub options: i32,
    pub lcid: i32,
}
#[test]
fn bindgen_test_layout_Il2CppSortKey() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppSortKey> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppSortKey>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppSortKey))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSortKey>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSortKey))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSortKey),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSortKey),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSortKey),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSortKey),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lcid) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSortKey),
            "::",
            stringify!(lcid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppErrorWrapper {
    pub base: Il2CppObject,
    pub errorCode: i32,
}
#[test]
fn bindgen_test_layout_Il2CppErrorWrapper() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppErrorWrapper> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppErrorWrapper>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppErrorWrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppErrorWrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppErrorWrapper))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppErrorWrapper),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errorCode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppErrorWrapper),
            "::",
            stringify!(errorCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppAsyncResult {
    pub base: Il2CppObject,
    pub async_state: *mut Il2CppObject,
    pub handle: *mut Il2CppWaitHandle,
    pub async_delegate: *mut Il2CppDelegate,
    pub data: *mut ::std::os::raw::c_void,
    pub object_data: *mut Il2CppAsyncCall,
    pub sync_completed: u8,
    pub completed: u8,
    pub endinvoke_called: u8,
    pub async_callback: *mut Il2CppObject,
    pub execution_context: *mut Il2CppObject,
    pub original_context: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppAsyncResult() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppAsyncResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppAsyncResult>(),
        88usize,
        concat!("Size of: ", stringify!(Il2CppAsyncResult))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAsyncResult>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAsyncResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(async_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_delegate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(async_delegate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(object_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync_completed) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(sync_completed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completed) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(completed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endinvoke_called) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(endinvoke_called)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_callback) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(async_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).execution_context) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(execution_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).original_context) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(original_context)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppAsyncCall {
    pub base: Il2CppObject,
    pub msg: *mut Il2CppMethodMessage,
    pub cb_method: *mut MethodInfo,
    pub cb_target: *mut Il2CppDelegate,
    pub state: *mut Il2CppObject,
    pub res: *mut Il2CppObject,
    pub out_args: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppAsyncCall() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppAsyncCall> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppAsyncCall>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppAsyncCall))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAsyncCall>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAsyncCall))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_method) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(cb_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_target) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(cb_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_args) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(out_args)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppExceptionWrapper {
    pub ex: *mut Il2CppException,
}
#[test]
fn bindgen_test_layout_Il2CppExceptionWrapper() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppExceptionWrapper> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppExceptionWrapper>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppExceptionWrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppExceptionWrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppExceptionWrapper))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppExceptionWrapper),
            "::",
            stringify!(ex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppIOAsyncResult {
    pub base: Il2CppObject,
    pub callback: *mut Il2CppDelegate,
    pub state: *mut Il2CppObject,
    pub wait_handle: *mut Il2CppWaitHandle,
    pub completed_synchronously: u8,
    pub completed: u8,
}
#[test]
fn bindgen_test_layout_Il2CppIOAsyncResult() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppIOAsyncResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppIOAsyncResult>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppIOAsyncResult))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppIOAsyncResult>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppIOAsyncResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_handle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(wait_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completed_synchronously) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(completed_synchronously)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completed) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(completed)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppSocketAsyncResult {
    pub base: Il2CppIOAsyncResult,
    pub socket: *mut Il2CppObject,
    pub operation: i32,
    pub delayedException: *mut Il2CppException,
    pub endPoint: *mut Il2CppObject,
    pub buffer: *mut Il2CppArray,
    pub offset: i32,
    pub size: i32,
    pub socket_flags: i32,
    pub acceptSocket: *mut Il2CppObject,
    pub addresses: *mut Il2CppArray,
    pub port: i32,
    pub buffers: *mut Il2CppObject,
    pub reuseSocket: u8,
    pub currentAddress: i32,
    pub acceptedSocket: *mut Il2CppObject,
    pub total: i32,
    pub error: i32,
    pub endCalled: i32,
}
#[test]
fn bindgen_test_layout_Il2CppSocketAsyncResult() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppSocketAsyncResult> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppSocketAsyncResult>(),
        168usize,
        concat!("Size of: ", stringify!(Il2CppSocketAsyncResult))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSocketAsyncResult>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSocketAsyncResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socket) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(socket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delayedException) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(delayedException)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endPoint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(endPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socket_flags) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(socket_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acceptSocket) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(acceptSocket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addresses) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(addresses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffers) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reuseSocket) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(reuseSocket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentAddress) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(currentAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acceptedSocket) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(acceptedSocket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endCalled) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(endCalled)
        )
    );
}
pub const Il2CppResourceLocation_IL2CPP_RESOURCE_LOCATION_EMBEDDED: Il2CppResourceLocation = 1;
pub const Il2CppResourceLocation_IL2CPP_RESOURCE_LOCATION_ANOTHER_ASSEMBLY: Il2CppResourceLocation =
    2;
pub const Il2CppResourceLocation_IL2CPP_RESOURCE_LOCATION_IN_MANIFEST: Il2CppResourceLocation = 4;
pub type Il2CppResourceLocation = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppManifestResourceInfo {
    pub object: Il2CppObject,
    pub assembly: *mut Il2CppReflectionAssembly,
    pub filename: *mut Il2CppString,
    pub location: u32,
}
#[test]
fn bindgen_test_layout_Il2CppManifestResourceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppManifestResourceInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppManifestResourceInfo>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppManifestResourceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppManifestResourceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppManifestResourceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManifestResourceInfo),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assembly) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManifestResourceInfo),
            "::",
            stringify!(assembly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManifestResourceInfo),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManifestResourceInfo),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppAppContext {
    pub obj: Il2CppObject,
    pub domain_id: i32,
    pub context_id: i32,
    pub static_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppAppContext() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppAppContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppAppContext>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppAppContext))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAppContext>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAppContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppContext),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppContext),
            "::",
            stringify!(domain_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppContext),
            "::",
            stringify!(context_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppContext),
            "::",
            stringify!(static_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppDecimal {
    pub reserved: u16,
    pub u: Il2CppDecimal__bindgen_ty_1,
    pub Hi32: u32,
    pub v: Il2CppDecimal__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppDecimal__bindgen_ty_1 {
    pub u: Il2CppDecimal__bindgen_ty_1__bindgen_ty_1,
    pub signscale: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDecimal__bindgen_ty_1__bindgen_ty_1 {
    pub scale: u8,
    pub sign: u8,
}
#[test]
fn bindgen_test_layout_Il2CppDecimal__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDecimal__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDecimal__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppDecimal__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDecimal__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppDecimal__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sign) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sign)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppDecimal__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDecimal__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDecimal__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(Il2CppDecimal__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDecimal__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(Il2CppDecimal__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_1),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signscale) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_1),
            "::",
            stringify!(signscale)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppDecimal__bindgen_ty_2 {
    pub v: Il2CppDecimal__bindgen_ty_2__bindgen_ty_1,
    pub Lo64: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDecimal__bindgen_ty_2__bindgen_ty_1 {
    pub Lo32: u32,
    pub Mid32: u32,
}
#[test]
fn bindgen_test_layout_Il2CppDecimal__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDecimal__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDecimal__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppDecimal__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDecimal__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppDecimal__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Lo32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(Lo32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mid32) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(Mid32)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppDecimal__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDecimal__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDecimal__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppDecimal__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDecimal__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDecimal__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_2),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Lo64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_2),
            "::",
            stringify!(Lo64)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppDecimal() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDecimal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDecimal>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppDecimal))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDecimal>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDecimal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hi32) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal),
            "::",
            stringify!(Hi32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDouble {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_Il2CppDouble() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDouble>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppDouble))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDouble>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppDouble))
    );
}
impl Il2CppDouble {
    #[inline]
    pub fn mantLo(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_mantLo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn mantHi(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_mantHi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn exp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(52usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_exp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(52usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn sign(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mantLo: u32,
        mantHi: u32,
        exp: u32,
        sign: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let mantLo: u32 = unsafe { ::std::mem::transmute(mantLo) };
            mantLo as u64
        });
        __bindgen_bitfield_unit.set(32usize, 20u8, {
            let mantHi: u32 = unsafe { ::std::mem::transmute(mantHi) };
            mantHi as u64
        });
        __bindgen_bitfield_unit.set(52usize, 11u8, {
            let exp: u32 = unsafe { ::std::mem::transmute(exp) };
            exp as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let sign: u32 = unsafe { ::std::mem::transmute(sign) };
            sign as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppDouble_double {
    pub s: Il2CppDouble,
    pub d: f64,
}
#[test]
fn bindgen_test_layout_Il2CppDouble_double() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppDouble_double> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppDouble_double>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppDouble_double))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDouble_double>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDouble_double))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDouble_double),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDouble_double),
            "::",
            stringify!(d)
        )
    );
}
pub const Il2CppDecimalCompareResult_IL2CPP_DECIMAL_CMP_LT: Il2CppDecimalCompareResult = -1;
pub const Il2CppDecimalCompareResult_IL2CPP_DECIMAL_CMP_EQ: Il2CppDecimalCompareResult = 0;
pub const Il2CppDecimalCompareResult_IL2CPP_DECIMAL_CMP_GT: Il2CppDecimalCompareResult = 1;
pub type Il2CppDecimalCompareResult = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSingle {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Il2CppSingle() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSingle>(),
        4usize,
        concat!("Size of: ", stringify!(Il2CppSingle))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSingle>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppSingle))
    );
}
impl Il2CppSingle {
    #[inline]
    pub fn mant(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_mant(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn exp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_exp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn sign(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(mant: u32, exp: u32, sign: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 23u8, {
            let mant: u32 = unsafe { ::std::mem::transmute(mant) };
            mant as u64
        });
        __bindgen_bitfield_unit.set(23usize, 8u8, {
            let exp: u32 = unsafe { ::std::mem::transmute(exp) };
            exp as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let sign: u32 = unsafe { ::std::mem::transmute(sign) };
            sign as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppSingle_float {
    pub s: Il2CppSingle,
    pub f: f32,
}
#[test]
fn bindgen_test_layout_Il2CppSingle_float() {
    const UNINIT: ::std::mem::MaybeUninit<Il2CppSingle_float> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Il2CppSingle_float>(),
        4usize,
        concat!("Size of: ", stringify!(Il2CppSingle_float))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSingle_float>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppSingle_float))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSingle_float),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSingle_float),
            "::",
            stringify!(f)
        )
    );
}
